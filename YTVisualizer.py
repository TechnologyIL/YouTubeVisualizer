from tkinter import ttk
from tkinter.ttk import Progressbar
from tkinter import *
from PIL import ImageTk, Image
import pygame
import base64
from io import BytesIO

def startSound():
    a = ""

    pygame.init()
    pygame.mixer.init()

    mp3_data = base64.b64decode(a)

    mp3_file = BytesIO(mp3_data)

    pygame.mixer.music.load(mp3_file)
    pygame.mixer.music.play()

    while pygame.mixer.music.get_busy() == True:
        continue

    pygame.mixer.quit()

def SplashScreen():
    w=Tk()

    width_of_window = 427
    height_of_window = 250
    screen_width = w.winfo_screenwidth()
    screen_height = w.winfo_screenheight()
    x_coordinate = (screen_width/2)-(width_of_window/2)
    y_coordinate = (screen_height/2)-(height_of_window/2)
    w.geometry("%dx%d+%d+%d" %(width_of_window,height_of_window,x_coordinate,y_coordinate))

    w.overrideredirect(1)

    s = ttk.Style()
    s.theme_use('clam')
    s.configure("red.Horizontal.TProgressbar", foreground='red', background='#4f4f4f')
    progress=Progressbar(w,style="red.Horizontal.TProgressbar",orient=HORIZONTAL,length=500,mode='determinate',)

    def bar():
        ssa = threading.Thread(target=startSound, args=[])
        ssa.start()

        l4=Label(w,text='Loading...',fg='white',bg=a)
        lst4=('Calibri (Body)',10)
        l4.config(font=lst4)
        l4.place(x=18,y=210)
        
        import time
        r=0
        for _ in range(200):
            progress['value']=r
            w.update_idletasks()
            time.sleep(0.03)
            r=r+1
        
        w.destroy()
        g = threading.Thread(target=Start, args=[])
        g.start()
            
    progress.place(x=-10,y=235)

    a = '#1F6AA5'
    Frame(w,width=427,height=241,bg=a).place(x=0,y=0) 
    b1=Button(w,width=10,height=1,text='Get Started',command=bar,border=0,fg=a,bg='white')
    b1.place(x=170,y=200)

    l1=Label(w,text='YouTube',fg='white',bg=a)
    lst1=('Calibri (Body)',20,'bold')
    l1.config(font=lst1)
    l1.place(x=230,y=77)
    
    pls = "iVBORw0KGgoAAAANSUhEUgAAAKoAAACqCAYAAAA9dtSCAAAAAXNSR0IArs4c6QAAC5hJREFUeJzt3XtslfUdBvDn3HvaQ+mVAqVXitzaUmrBAhO5OVjxgqPI3DRi6tR0y0TihiRG3AiZUYNhjgji4uYM0SljMmUbBREExYoFygqjAqWVFugV2tOenvv+aKtAOtb3cs7v/b7n+0ma9jT0fR9+ed73Pee9GjLLtwXBmMYZRQdgbCi4qIwELiojgYvKSOCiMhK4qIwELiojgYvKSOCiMhK4qIwELiojgYvKSOCiMhK4qIwELiojgYvKSOCiMhK4qIwELiojgYvKSOCiMhK4qIwELiojgYvKSOCiMhLMoZpwRpIDJYXpWFSQhvyMhFDNJqRau3rx2enL2FfThD3VjXD2ekVHilgGtW/pkzMyFmvum4p5uaPVnKxwbq8f7352Di/uPI5uLmzYqVbUaJsZa5fdivtnZKsxOc260NaN8jcO4kRDu+goEUWV96hjEmPwwa8W6r6kQN//defqhVh97xTRUSKK4qLmpsXjozWLkDMyVo08ZDzx/Ul4ZcUM0TEihqKiJjhs2PrEbMTarWrlIWXJtEw8u7RQdIyIoKioWx6/HSPjotXKQlLZvPH4ye05omPonuyili+chKLsZDWzkLW29FaMTYmstz7hJquow6Ot+PmiXLWzkGUxG/H7slkwGQ2io+iWrKKuuisPdqtJ7SykTUiNw8rFeaJj6JbkopqMBvzwtqxQZCGvfOEk5KXTPAqndZKLWjQ2GY4oSyiykGc0GPBq2SzYLLy1UZvkos7PTQ1FDt3ISHLgmSUFomPojuSiTk6LD0UOXVkx5xYUjxshOoauSC5qcmxUKHLozsZHZiLaGrKT0yKO5KImDeOiDsWI4Xasf2Ca6Bi6IXmRj3fYQpFDl5ZMz4TFbMSOyvO6OjXQ6w+go9uDjm43OpzusMxTclH9gSDv2JZgcWE6Fhemi44RMi6PH/tPNuEfR7/BnhON6HH7QjIffhPFFLFbTVhUkIZFBWnocfuwde9/8HrFKfR41C2srB3+jA0m2mbGkyW5OLjuHtw3PVPVaUsuqj/AD6NmNxfvsGHDwzPw7NJCGA3qrNh4jcpCpmzeeLz5sztUmRavUVlIzZ44Cr9ZXqR4OnxdPwu5h2aPwzKF19NxUVlYrFtehEQFB4u4qCwsbBYTfnlPvuy/5w9TLGyWzxwr+2pl/jDFwmqJzP2rvOlnYTVP5vnMXFQWVhNT42RdYs9FZWEn5+6OXFQWdqkJMZL/hovKwm50fBg2/bx7iimVJONyJt49xcJOzhlVvOlnJHBRGQl8KcoNfIEgej0+uDx+uDw+9Hr8cHn7XoeC3WqC3WJGlNUEu9UMu9WEKKsZZv4scB1dFrWuuQsnGtpx5lLnd6Xz9peu/3WvxweX94bXHj+8/oDo+AAAi8n4bWntAyW2XP86qr/kA/9uYmocJqfFIz3JITq+6nRT1H01TdhV1YDPa5vR2N4tOo5iXn8AXlcAnS7pl1mnJzkwPScZJYXpmDtZH0+nIV/UyjPNWP/XY6iubxMdRTMaWp1oaHXi/cN1yM9IxOp7p2Dm+BTRsRQh/WFq+xd1ePB3+7ikN1Fd34aHN32Cdw6dFR1FEbJFfWt/LZ5+67Bm3lNqmc8fwJptlXhrf63oKLKRLGpTRw+2VJwSHYOcLRWn0NTRIzqGLCSLSnnARaK8gJMrakunCzsq60THIGtHZR1aOl2iY0hGrqgV1Y3okrHLhvXpcnlRUd0oOoZkJIvKlKE4hqSK6gsEUXWuVXQM8o6cbYGP2N4SUkWt+aYdnS6P6BjkOXu9OHae1r5nUkX9itemquGihlDd5S7REXSjvsUpOoIkpIra1EH/ZBOtoDaWpIra2M47+dVCbSxJFVULa4EJqXGiI6hCC2MpBZmienwBTezof2/VAuxcvRApsXbRURTpcnnh8dHZRUWmqE4NPacpLz0Bh3+7BO8+tQBWM90H9GppTP8fMkXV4gPFpuck4/TG+/HH8jmio8iixTH9X8gU1RmiB22p4Y7Jo1C36QFsenSW6CiSaHlMb0SnqASW/pKp6Tjz6o/w4oO3iY4yJBTGdAAXVWUmowHLZmTj9MbleK60UHScm6IypgChonb30tlMAYDVbMQjc8ej5pVlWLk4T3ScQVEaUzJFpbT0Xyva2vfYxeMvLUXZvAmi41yH0phyUcMkNtqKZ5dOxZcv3IfSYmXPXFILpTElVFQ6m6mbSRoWhZceug2H1t2LBfny7mevFkpjSqaoejM6IRpbH5+Nvc/dhVvHJomOo3lcVMGyU4bh/VV34qM1i5CRrL97RqmFi6oBl6704LXdJ8mdIxpO5O89RVmb040Nf6/GtoNnREfRPC6qAJ0uL17bfRKbd58UHYUMLmoY9Xh8eHNfLV7eeVx0FHLIFNVqpvt22uPz451DZ7H2L1+JjnIdSmNKpqiOKIvoCJL5AkF8UHkeT//5sOgog6I0poSKSiYqAsEg/nXsAsrfOCg6yk1RGlMySaks/ftPXsSjmw+QuBMJlTEFCBU1RuODWnmmGWWvHSB1/FzrY3otMkXV6maqur4dP91yAM1X6d3KUatjOhgySR02bS39tRev4hd/OITTF6+KjiKb1sb0ZugUVSObqbauXpRtPoDKr5tFR1FMK2M6FGSKGqORzdSc5z8UHUE1WhnToSCzx5fS0k8FpTElU1Sg7xxOpg5qY0mrqPExoiPoBrWxJFXUVGJrAS2jNpakikptLaBl1MaSVFELMhNFR9CNSWPiRUeQhFRR89ITREfQDWoLPamijoqPxoTR+riRrkjjRg3HmETe9IfUrAm0nzuvBbMnjhQdQTJyRV2QP0Z0BPIojiG5ohaPG4EpxN5facmUzEQUjxshOoZk5IoKAGVzx4uOQBbVsSNZ1LuLMnB3UYboGORQHjeSRQWAlSW5mJaTLDoGGYVZSXiyJFd0DNnIFjU7JRbbnpyPH38vR3QUzVs2IxvvPjUfY1NiRUeRjc4JiYMwGw1Y/8A0TM1Kwq6qBuyraRIdSVPmTh6NksJ0lBZniY6iGOmiDigtzkJpcRbanG5UnWtFU3s3mjp60NjejeZOF3rcvr4vj+/bn/2BoOjYshgNBtitJkRZzX3fLX3f7VYTUhMcyE4ZhjEJMchOGYb8DP3sHdFFUQckOmy4c4g3x3X7/IMWeLCf3d4AfP4AvP1fPn8AXt/Az8Hrf99/mbTVbILFZITVbITFbITV1P+9//cWsxE2s7GvcJbvindt+QYrI+UHsCmhq6JKYTObYDObEB9jEx2FDQHZD1MssnBRGQmSi2oyGkKRg0UQOR9kJRf1YkeP5Jkwdq2WTul3lZFc1MsEb13DtOXSlTAU9eIVXqMyZeRslSUX9cszLZJnwtiAYBD4QsbtkCQX9eMTjZJnwtiA4/Vt6Oh2S/47yUWtb3WirrlL8owYA4C9Mld0svaj/ml/rayZscjm8vhlP1NLVlHfPvA1LrR1y5ohi1yv7zmFdqf0zT4gs6j+QBDrtlfJmiGLTM1XXYoeACf7EOru4xfw9qdfy54xixw+fwCPvf4per1+2dNQdKz/1+9V4Whdq5JJsAjwzLZKHD/fpmgaiorq8wfw6OYDqK5vVxSC6dcLfzuG7YfrFE9H8dlT7U43SjdUYFdVg+IwTD9cHj8e2/IptlScUmV6prhpS59XOpFAIIhdR7/BpSsuTM1KRLQtYs/HZgA+/ncTyrcexJFz6h3FNGSWb1P14qEoiwkr5o7HI3NuwYjhdjUnzTTu89rL2PDhCRw5q/5hdtWLeq2iscn4wdQ0FGQmItFhQ1yMDcOjraGaHQujls5edDjdaOzoxic1TfjnsQshfShcSLfRR862hGTpYpGHL0VhJHBRGQlcVEYCF5WRwEVlJHBRGQlcVEYCF5WRwEVlJHBRGQlcVEYCF5WRwEVlJHBRGQlcVEYCF5WRwEVlJHBRGQlcVEYCF5WRwEVlJHBRGQlcVEYCF5WRwEVlJPwXngVxINibh30AAAAASUVORK5CYII="

    img = PhotoImage(data=pls)

    panel = Label(w, image=img, width=150,height=150)
    panel.place(x=63,y=25)

    l3=Label(w,text='Visualizer',fg='white',bg=a)
    lst3=('Calibri (Body)',15)
    l3.config(font=lst3)
    l3.place(x=230,y=110)

    w.mainloop()

if __name__ == "__main__":
    import threading
    t = threading.Thread(target=SplashScreen, args=[])
    t.start()
    
#python libraries
import base64
from googleapiclient.discovery import build
from pythumb import Thumbnail
import re
from PIL import Image
import numpy as np
from numpy.linalg import norm
import numpy as np
from sklearn.cluster import KMeans
from colormath.color_objects import sRGBColor, HSLColor
from colormath.color_conversions import convert_color
import requests
import json
import urllib
import multiprocessing
from contextlib import closing
import concurrent.futures
import sqlite3
import tkinter
import tkinter.messagebox
from customtkinter import *
from time import *
import threading
import pandas as pd
from PIL import Image as PIL_Image
import inflect
import os
import cv2
import shutil
import matplotlib.pyplot as plt
from sklearn.cluster import MiniBatchKMeans
import webbrowser
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import animation
import matplotlib.dates as mdates
from matplotlib.ticker import FuncFormatter
from datetime import datetime
from matplotlib.dates import DateFormatter
import io
from tkinter import messagebox
import urllib.request
import re
import googleapiclient.discovery
import googleapiclient.errors
import requests
import warnings
warnings.filterwarnings("ignore")

def count_rows(number_of_folder_to_open):
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Execute the SELECT COUNT(*) statement
    cur.execute(f"SELECT * FROM video_information")
    rows = cur.fetchall()
    row_count = len(rows)

    # Close the connection
    conn.close()

    tkinter.messagebox.showinfo("NUMBER OF ROWS", f"THE NUMBER OF ROWS IN THE FILE IS {row_count}")

def ManageDatabase_sqlite_to_excel(number_of_folder_to_open):
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))

    # Read all data from the "employees" table into a DataCTkFrame
    df = pd.read_sql_query("SELECT * from video_information", conn)

    # Write the DataCTkFrame to an Excel file
    df.to_excel(os.path.join(folder_path, "video_information.xlsx"), index=False)

    # Close the database connection
    conn.close()

def delete_duplicate_rows(number_of_folder_to_open):
    table_name = "video_information"
    video_id_column = "video_id"
    
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()
    
    # Create a temporary table to hold the duplicate rows
    cur.execute(f"CREATE TEMP TABLE duplicates AS SELECT {video_id_column}, COUNT(*) FROM {table_name} GROUP BY {video_id_column} HAVING COUNT(*) > 1")

    # Delete duplicate rows from the original table, leaving one of them
    cur.execute(f"""DELETE FROM {table_name} WHERE {video_id_column} IN (SELECT {video_id_column} FROM {table_name} GROUP BY {video_id_column} HAVING COUNT(*) > 1)
                AND rowid NOT IN (SELECT MIN(rowid) FROM {table_name} GROUP BY {video_id_column} HAVING COUNT(*) > 1)""")

    # Save changes and close the connection
    conn.commit()
    conn.close()
    
def combine_databases(number_of_folder_to_open_db1, number_of_folder_to_open_db2):
    if number_of_folder_to_open_db1 == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open_db1}")
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    os.makedirs(folder_path, exist_ok=True)
    conn1 = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur1 = conn1.cursor()

    if number_of_folder_to_open_db2 == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open_db2}")
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    os.makedirs(folder_path, exist_ok=True)
    conn2 = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur2 = conn2.cursor()

    incrementnumberforfoldername = increment_number()
    create_folder_in_current_directory(f"YT_program_files {incrementnumberforfoldername}")
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    folder_path = os.path.join(current_directory, f"YT_program_files {incrementnumberforfoldername}")
    # Create a new database
    conn3 = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur3 = conn3.cursor()

    # Create the table in the new database
    cur3.execute('''CREATE TABLE IF NOT EXISTS video_information(
                number_of_row INTEGER,
                channel_id TEXT,
                channel_name TEXT,
                subscriber_count INTEGER,
                title TEXT,
                number_of_words_in_the_title INTEGER,
                num_letters_in_the_title INTEGER,
                views INTEGER,
                likes INTEGER,
                release_date TEXT,
                Duration TEXT,
                total_comments INTEGER,
                number_of_tags INTEGER,
                number_of_words_in_the_description INTEGER,
                average_brightness REAL,
                average_red REAL,
                average_green REAL,
                average_blue REAL,
                description TEXT,
                Tags TEXT,
                file_name TEXT,
                colorname1 TEXT,
                RGB1 TEXT,
                colorname2 TEXT,
                RGB2 TEXT,
                colorname3 TEXT,
                RGB3 TEXT,
                colorname4 TEXT,
                RGB4 TEXT,
                colorname5 TEXT,
                RGB5 TEXT,
                colorname6 TEXT,
                RGB6 TEXT,
                colorname7 TEXT,
                RGB7 TEXT,
                colorname8 TEXT,
                RGB8 TEXT,
                colorname9 TEXT,
                RGB9 TEXT,
                colorname10 TEXT,
                RGB10 TEXT,
                video_id TEXT,
                face_detected TEXT
                )''')

    # Copy data from the first database
    cur1.execute('SELECT * FROM video_information')
    data1 = cur1.fetchall()
    cur3.executemany('INSERT INTO video_information VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', data1)

    # Copy data from the second database
    cur2.execute('SELECT * FROM video_information')
    data2 = cur2.fetchall()
    cur3.executemany('INSERT INTO video_information VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', data2)

    # Save changes and close connections
    conn1.commit()
    conn1.close()
    conn2.commit()
    conn2.close()
    conn3.commit()
    conn3.close()
    
def UploadTime_ViewsGraph(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Retrieve data from table
    cur.execute("SELECT views, substr(release_date, 12) as release_time FROM video_information")
    data = cur.fetchall()

    # Create lists for x and y values
    views = [x[0] for x in data]
    release_times = [datetime.strptime(x[1], '%H:%M:%S') for x in data]
    
    # Create scatter plot
    plt.scatter(release_times, views)
    plt.xlabel("Upload Time (HH:MM:SS)")
    plt.ylabel("Views")
    plt.gca().xaxis.set_major_formatter(DateFormatter("%H:%M:%S"))
    plt.xticks(rotation=90)
    plt.subplots_adjust(bottom=0.25)
    plt.show()

    # Close connection
    conn.close()
    
def ReleaseDate_ViewsGraph(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Get release date and views from database
    cur.execute("SELECT release_date, views FROM video_information")
    data = cur.fetchall()

    # Extract release date and views into separate lists
    dates = [datetime.strptime(d[0], '%Y-%m-%d %H:%M:%S') for d in data]
    views = [d[1] for d in data]

    # Create and format graph
    plt.scatter(dates, views)
    plt.xlabel("Release Date")
    plt.ylabel("Views")
    plt.xticks(rotation=45)
    plt.gcf().autofmt_xdate()

    # Show graph
    plt.show()

    # Close connection
    conn.close()
    
def Tags_ViewsGraph(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Execute a query to select the views and average_brightness columns from the video_information table
    cur.execute("SELECT views, number_of_tags FROM video_information")
    data = cur.fetchall()
    
    # Unpack the data into x and y lists for the scatter plot
    y = [d[0] for d in data]
    x = [d[1] for d in data]
    
    # Create the scatter plot
    plt.scatter(x, y)
    plt.ylabel("Views")
    plt.xlabel("Number Of Tags")
    plt.title("Number Of Tags vs Views")

    plt.show()
    conn.close()
    
def LikesViewsGraph(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Execute a query to select the views and average_brightness columns from the video_information table
    cur.execute("SELECT views, likes FROM video_information")
    data = cur.fetchall()
    
    # Unpack the data into x and y lists for the scatter plot
    x = [d[0] for d in data]
    y = [d[1] for d in data]
    
    # Create the scatter plot
    plt.scatter(x, y)
    plt.ylabel("Likes")
    plt.xlabel("Views")
    plt.title("Likes vs Views")

    plt.show()
    conn.close()
    
def SubscriberCountViewsGraph(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Execute a query to select the views and average_brightness columns from the video_information table
    cur.execute("SELECT views, subscriber_count FROM video_information")
    data = cur.fetchall()
    
    # Unpack the data into x and y lists for the scatter plot
    y = [d[0] for d in data]
    x = [d[1] for d in data]
    
    # Create the scatter plot
    plt.scatter(x, y)
    plt.ylabel("Views")
    plt.xlabel("Subscriber Count")
    plt.title("Subscriber Count vs Views")

    plt.show()
    conn.close()
    
def time_formatter(x, pos):
    seconds = int(x)
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def Duration_graph(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()
    # Retrieve data from 'video_information' table
    cur.execute("SELECT Duration, views FROM video_information")
    data = cur.fetchall()

    # Initialize lists to store duration and views
    durations = []
    views = []

    # Iterate through data and store duration and views in separate lists
    for row in data:
        duration = row[0]
        view = row[1]
        #remove the 'Duration: ' prefix
        duration = duration.split(':', 1)[-1]
        duration = duration.strip()
        # convert the duration string to a numerical value in seconds
        duration_seconds = int(duration.split(':')[0]) * 3600 + int(duration.split(':')[1]) * 60 + int(duration.split(':')[2])
        durations.append(duration_seconds)
        views.append(view)

    # Close connection
    conn.close()

    # Plot the data using matplotlib
    plt.scatter(durations, views)
    plt.xlabel("Duration")
    plt.ylabel("Views")

    # Set the x-axis tick formatter
    plt.gca().xaxis.set_major_formatter(FuncFormatter(time_formatter))

    # Show the plot
    plt.show()
    
def title_views_graph_3D(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()
    cur.execute('SELECT number_of_words_in_the_title, num_letters_in_the_title, views FROM video_information')
    data = cur.fetchall()
    conn.close()

    # Unpack the data into separate lists for x, y, and z
    x = [row[0] for row in data]
    y = [row[1] for row in data]
    z = [row[2] for row in data]

    # Create the 3D histogram
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    hist, xedges, yedges = np.histogram2d(x, y, bins=10)
    xpos, ypos = np.meshgrid(xedges[:-1]+xedges[1:], yedges[:-1]+yedges[1:])
    xpos = xpos.flatten()/2.
    ypos = ypos.flatten()/2.
    zpos = np.zeros_like (xpos)

    # Construct arrays with the dimensions for the 16 bars.
    dx = xedges [1] - xedges [0]
    dy = yedges [1] - yedges [0]
    dz = hist.flatten()

    ax.bar3d(xpos, ypos, zpos, dx, dy, dz, color='#00aaff', zsort='average')

    # Set axis labels and title
    ax.set_xlabel('Number of Words in Title')
    ax.set_ylabel('Number of Letters in Title')
    ax.set_zlabel('Views')
    ax.set_title('Number of Words and Letters in Title vs Views')

    plt.show()

def create_pie_charts_for_colorname(number_of_folder_to_open, number_of_colorname):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Retrieve data from 'video_information' table
    cur.execute("""SELECT colorname1, colorname2, colorname3, colorname4, colorname5, colorname6, colorname7, colorname8, colorname9, colorname10
                FROM video_information WHERE colorname1 IS NOT NULL AND colorname2 IS NOT NULL AND colorname3 IS NOT NULL AND colorname4 IS NOT NULL AND colorname5
                IS NOT NULL AND colorname6 IS NOT NULL AND colorname7 IS NOT NULL AND colorname8 IS NOT NULL AND colorname9 IS NOT NULL AND colorname10 IS NOT NULL""")
    data = cur.fetchall()

    # Create a list of all possible colors
    colors = ['black', 'gray', 'white', 'red', 'orange', 'yellow', 'yellowgreen', 'green', 'turquoise', 'blue', 'purple', 'magenta', 'pink']

    # Create a list of lists for each colorname1 to colorname10
    colorname_lists = [[row[i] for row in data] for i in range(10)]

    # Create a list for each color count
    color_counts = [colorname_lists[number_of_colorname].count(color) for color in colors]
    # Create a list for each color count with the number of videos
    color_counts_with_videos = [color + ": " + str(count) + " videos" for color, count in zip(colors, color_counts)]
    # Create a new figure for each colorname
    fig, ax = plt.subplots(figsize=(20, 15))
    # Create a pie chart for the current colorname
    ax.pie(color_counts, labels=color_counts_with_videos, autopct='%1.1f%%', colors=colors)
    ax.set_title("colorname" + str(number_of_colorname + 1))
    # Show the plot
    plt.show()

def create_views_brightness_graph(number_of_folder_to_open):
    plt.close('all')
    if number_of_folder_to_open == 0:
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    # Get the current directory where the program is running
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))

    # Open the "YT_program_files 1" folder in the program directory
    folder_path = os.path.join(current_directory, f"YT_program_files {number_of_folder_to_open}")
    
    if not os.path.exists(folder_path):
        tkinter.messagebox.showinfo("ERROR", "WRONG VALUE FOR FOLDER")
        return
    
    os.makedirs(folder_path, exist_ok=True)

    # Connect to the video_information.db SQLite database
    conn = sqlite3.connect(os.path.join(folder_path, "video_information.db"))
    cur = conn.cursor()

    # Execute a query to select the views and average_brightness columns from the video_information table
    cur.execute("SELECT views, average_brightness FROM video_information")
    data = cur.fetchall()
    
    # Unpack the data into x and y lists for the scatter plot
    y = [d[0] for d in data]
    x = [d[1] for d in data]
    
    # Create the scatter plot
    plt.scatter(x, y)
    plt.ylabel("Views")
    plt.xlabel("Average Brightness")
    plt.title("Average Brightness vs Views")

    if y:
        avg_brightness = np.mean(x)
        plt.text(0.95, 0.95, "Avg Brightness of all the videos: {:.2f}".format(avg_brightness),
        verticalalignment='top', horizontalalignment='right',
        transform=plt.gca().transAxes,
        color='green', fontsize=8)

    else:
        plt.text(0.95, 0.05, 'Avg Brightness of all the videos: No Data found!',
        verticalalignment='top', horizontalalignment='right',
        transform=plt.gca().transAxes,
        color='green', fontsize=8)

    if len(x) >= 10:
        x.sort()
        top_10_avg_brightness = np.mean(x[-int(len(x) * 0.1):])
        bottom_10_avg_brightness = np.mean(x[:int(len(x) * 0.1)])
        
        avg_brightness = np.mean(x)
        plt.text(0.95, 0.90, "Top 10% Avg Brightness: {:.2f}".format(top_10_avg_brightness),
        verticalalignment='top', horizontalalignment='right',
        transform=plt.gca().transAxes,
        color='green', fontsize=8)

        avg_brightness = np.mean(x)
        plt.text(0.95, 0.85, "Bottom 10% Avg Brightness: {:.2f}".format(bottom_10_avg_brightness),
        verticalalignment='top', horizontalalignment='right',
        transform=plt.gca().transAxes,
        color='green', fontsize=8)

    else:
        plt.text(0.95, 0.01, 'Not enough data to calculate the top and bottom 10% average brightness',
        verticalalignment='bottom', horizontalalignment='right',
        transform=plt.gca().transAxes,
        color='green', fontsize=8)

    plt.show()
    conn.close()

def increment_number():
    import os
    file_path = "NumberOfFolder.txt"
    if not os.path.exists(file_path):
        with open(file_path, "w") as f:
            f.write("0")

    with open(file_path, "r") as f:
        number = int(f.read())

    number += 1

    with open(file_path, "w") as f:
        f.write(str(number))

    return number

def move_file_to_folder(file_name, destination_folder):
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    file_path = os.path.join(current_directory, file_name)
    destination_path = os.path.join(destination_folder, file_name)
    shutil.move(file_path, destination_path)

def remove_file_in_current_directory(file_name):
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    file_path = os.path.join(current_directory, file_name)
    if os.path.isfile(file_path):
        try:
            os.remove(file_path)
            app.PrintInTextBox("File successfully deleted.")
        except Exception as e:
            app.PrintInTextBox(f"Error deleting file: {e}")
    else:
        app.PrintInTextBox("File does not exist in the current directory.")

def create_folder_in_current_directory(folder_name):
    current_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    folder_path = os.path.join(current_directory, folder_name)
    try:
        os.mkdir(folder_path)
    except FileExistsError:
        app.PrintInTextBox("FileExistsError")
        pass

def sqlite_to_excel(db_file, excel_file):
    # Connect to the SQLite database
    conn = sqlite3.connect(db_file)

    # Read all data from the "employees" table into a DataCTkFrame
    df = pd.read_sql_query("SELECT * from video_information", conn)

    # Write the DataCTkFrame to an Excel file
    df.to_excel(excel_file, index=False)

    # Close the database connection
    conn.close()

def SQLiteTABLE():
    # Connect to database or create it if it doesn't exist
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()

    # Create table if it doesn't exist
    cur.execute('''CREATE TABLE IF NOT EXISTS video_information(
                number_of_row INTEGER,
                channel_id TEXT,
                channel_name TEXT,
                subscriber_count INTEGER,
                title TEXT,
                number_of_words_in_the_title INTEGER,
                num_letters_in_the_title INTEGER,
                views INTEGER,
                likes INTEGER,
                release_date TEXT,
                Duration TEXT,
                total_comments INTEGER,
                number_of_tags INTEGER,
                number_of_words_in_the_description INTEGER,
                average_brightness REAL,
                average_red REAL,
                average_green REAL,
                average_blue REAL,
                description TEXT,
                Tags TEXT,
                file_name TEXT,
                colorname1 TEXT,
                RGB1 TEXT,
                colorname2 TEXT,
                RGB2 TEXT,
                colorname3 TEXT,
                RGB3 TEXT,
                colorname4 TEXT,
                RGB4 TEXT,
                colorname5 TEXT,
                RGB5 TEXT,
                colorname6 TEXT,
                RGB6 TEXT,
                colorname7 TEXT,
                RGB7 TEXT,
                colorname8 TEXT,
                RGB8 TEXT,
                colorname9 TEXT,
                RGB9 TEXT,
                colorname10 TEXT,
                RGB10 TEXT,
                video_id TEXT,
                face_detected TEXT
                )''')

    # Save changes and close connection
    conn.commit()
    conn.close()

def insert_into_SQLiteTABLE_VideoInformation(number_of_row, channel_id, channel_name, subscriber_count, title, \
                                             number_of_words_in_the_title, num_letters_in_the_title, views, likes, release_date, duration, \
                                             total_comments, number_of_tags, number_of_words_in_the_description, description, tags, video_id):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()

    # Insert data into table
    cur.execute("""INSERT INTO video_information (number_of_row, channel_id, channel_name, subscriber_count, title,
                number_of_words_in_the_title, num_letters_in_the_title, views, likes, release_date, duration, total_comments,
                number_of_tags, number_of_words_in_the_description, description, tags, video_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""", \
                (number_of_row, channel_id, channel_name, subscriber_count, title, number_of_words_in_the_title, num_letters_in_the_title, views, \
                 likes, release_date, duration, total_comments, number_of_tags, \
                 number_of_words_in_the_description, description, tags, video_id))

    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_average_brightness(number_of_row,average_brightness):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET average_brightness = ? where number_of_row = ?", (average_brightness,number_of_row))

    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_average_color(number_of_row,average_red, average_green, average_blue):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET average_red = ? where number_of_row = ?", (average_red,number_of_row))
    cur.execute("UPDATE video_information SET average_green = ? where number_of_row = ?", (average_green,number_of_row))
    cur.execute("UPDATE video_information SET average_blue = ? where number_of_row = ?", (average_blue,number_of_row))

    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_file_name(number_of_row, file_name):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET file_name = ? where number_of_row = ?", (file_name,number_of_row))

    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_1(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname1 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB1 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_2(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname2 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB2 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_3(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname3 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB3 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_3(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname3 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB3 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_4(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname4 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB4 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_5(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname5 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB5 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_6(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname6 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB6 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_7(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname7 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB7 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_8(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname8 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB8 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_9(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname9 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB9 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()

def update_SQLiteTABLE_dominantColors_10(number_of_row, colorname, RGB):
    # Connect to database
    conn = sqlite3.connect('video_information.db')
    cur = conn.cursor()
    cur.execute("UPDATE video_information SET colorname10 = ? where number_of_row = ?", (colorname,number_of_row))
    cur.execute("UPDATE video_information SET RGB10 = ? where number_of_row = ?", (RGB,number_of_row))
    
    # Save changes and close connection
    conn.commit()
    conn.close()
    
def YTlinks(list_of_channel_id1, list_of_search_tearms1, api_key1, amount_of_videos_you_want):
    for j in range(len(list_of_search_tearms1)):
        try:
            def get_video_links(search_term):
                query = urllib.parse.quote(search_term)
                url = "https://www.youtube.com/results?search_query=" + query
                response = urllib.request.urlopen(url)
                html = response.read()
                video_ids = re.findall(r"watch\?v=(\S{11})", html.decode())
                video_links = ["https://www.youtube.com/watch?v=" + id for id in video_ids]
                unique_links = list(set(video_links))
                return unique_links

            def get_channel_links(video_links, api_key):
                channel_links = []
                channel_ids = []
            
                for video_link in video_links:
                    # Extract video ID from video link
                    video_id = video_link.split("v=")[1]
                    
                    # Call YouTube API to get channel ID
                    youtube = googleapiclient.discovery.build("youtube", "v3", developerKey=api_key)
                    request = youtube.videos().list(part="snippet", id=video_id)
                    response = request.execute()
                    
                    # Extract channel ID from response
                    channel_id = response["items"][0]["snippet"]["channelId"]

                    if channel_id not in channel_ids:
                        channel_ids.append(channel_id)
                    
                    # Construct channel link from channel ID
                    channel_link = f"https://www.youtube.com/channel/{channel_id}"
                    
                    # Add channel link to list if it doesn't already exist
                    if channel_link not in channel_links:
                        channel_links.append(channel_link)
                
                return channel_ids

            def get_videos(channel_ids, num_videos, YOUR_API_KEY):
                # Create an empty list to store the videos
                videos = []
                # Loop through each channel id
                for channel_id in channel_ids:
                    # Construct the API url with the channel id and the number of videos
                    url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&channelId={channel_id}&maxResults={num_videos}&type=video&key={YOUR_API_KEY}"
                    # Make a GET request to the API and get the response as JSON
                    response = requests.get(url).json()
                    # Loop through each item in the response
                    for item in response["items"]:
                        # Get the video id and title from the snippet
                        video_id = item["id"]["videoId"]
                        videos.append(video_id)
                # Return the videos list
                return videos
            
            video_links = get_video_links(list_of_search_tearms1[j])
            app.PrintInTextBox(f"Got video links for {list_of_search_tearms1[j]}")

            channel_ids = get_channel_links(video_links, api_key1)
            app.PrintInTextBox("Got channel links")

            all_videos_links = get_videos(channel_ids, amount_of_videos_you_want, api_key1)
            app.PrintInTextBox("Got all videos links")

            for i in all_videos_links:
                if i not in list_of_channel_id1:
                    list_of_channel_id1.append(i)

        except:
            app.PrintInTextBox("ERROR WITH YTlinks")
            app.PrintInTextBox("ERROR Check your API KEY")
            if j + 1 == range(len(list_of_search_tearms1)):
                break
            continue

    # Open a file in append mode
    with open('YTlinks.txt', 'a') as f:
            # Read input from the user
            for video in list_of_channel_id1:
                string = "https://www.youtube.com/watch?v=" + video
                # Write the string to the file
                f.write(string + '\n')

def ThumbnailDownload():
    app.PrintInTextBox(f"Downloading thumbnails")
    #how meny youtube urls
    counter1 = 1
    # Open the text file
    with open('YTlinks.txt', 'r') as f:
      # Read each line of the file
      for line in f:
        # Use a regular expression to check if the line is a YouTube video link
        if re.match(r'https://www\.youtube\.com/watch\?v=[A-Za-z0-9_-]{11}', line):
          t = Thumbnail(line)
          t.fetch()
          t.save('.', counter1)
          counter1 = counter1 + 1
          # If the line is a YouTube video link, print it
          #app.PrintInTextBox(line)
    app.PrintInTextBox(f"Number of thumbnails downloaded {counter1}")
    return counter1

def VideoInformation(API_KEY1):
    counter = 1
    with open("YTlinks.txt") as file:
        for line in file:
            line = line[:-1]
            VIDEO_id = line #"https://www.youtube.com/watch?v=Sf8vefrS5PQ" # Replace VIDEO_URL with the URL of the video you want to get information for

            VIDEO_ID = VIDEO_id[VIDEO_id.index("=")+1:]

            app.PrintInTextBox(f"Collecting information about {VIDEO_ID}")

            # Make a request to the YouTube Data API to get information about the video
            response = requests.get(f"https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id={VIDEO_ID}&key={API_KEY1}")
            # Convert the response to a JSON object
            data = response.json()

            try:
                # Get the title, number of views, length, release date of the video
                if data['items']:
                    channel_id = data['items'][0]['snippet']['channelId']
                    channel_name = data['items'][0]['snippet']['channelTitle']
                    title = data['items'][0]['snippet']['title']
                    views = data['items'][0]['statistics']['viewCount']
                    likes = data['items'][0]['statistics']['likeCount']
                    release_date = data['items'][0]['snippet']['publishedAt']
                    release_date = release_date.replace("T", " ").replace("Z", "")
                    if data['items'][0]['snippet']['description']:
                        description = data['items'][0]['snippet']['description']
                    else:
                        description = "No data available for this video."
                    tags = data['items'][0]['snippet'].get('tags', "No data available for this video.")
                
                    if data['items'][0]['statistics']['commentCount']:
                        total_comments = data['items'][0]['statistics']['commentCount']
                    else:
                        total_comments = "No data available for this video."
                else:
                    app.PrintInTextBox("No data available for this video.")
                    continue

                search_url = f'https://www.googleapis.com/youtube/v3/videos?id={VIDEO_ID}&key={API_KEY1}&part=contentDetails'
                req = urllib.request.Request(search_url)
                response = urllib.request.urlopen(req).read().decode('utf-8')
                data = json.loads(response)
                all_data = data['items']
                duration = all_data[0]['contentDetails']['duration']

                #Split the duration string into hours, minutes, and seconds
                parts = duration[2:].split('H')
                if len(parts) == 2:
                    hours = int(parts[0])
                    minutes_seconds = parts[1]
                elif parts[0][:2] == "DT":
                    hours = 0
                    minutes_seconds = parts[0][2:]
                else:
                    hours = 0
                    minutes_seconds = parts[0]

                parts = minutes_seconds.split('M')
                if len(parts) == 2:
                    minutes = int(parts[0])
                    seconds_parts = parts[1].split('S')
                    if len(seconds_parts) > 1:
                        seconds = int(seconds_parts[0])
                    else:
                        seconds = 0
                elif parts[0][:1] == "T":
                    minutes = int(parts[0][1:])
                    seconds_parts = parts[1].split('S')
                    if len(seconds_parts) > 1:
                        seconds = int(seconds_parts[0])
                    else:
                        seconds = 0
                else:
                    minutes = 0
                    if len(parts[0]) > 0:
                        seconds_parts = parts[0].split('S')
                        if len(seconds_parts) > 1:
                            seconds = int(seconds_parts[0])
                        else:
                            seconds = 0
                    else:
                        seconds = 0

                # Make a request to the YouTube Data API to get information about the channel
                channel_response = requests.get(f"https://www.googleapis.com/youtube/v3/channels?part=statistics&id={channel_id}&key={API_KEY1}")
                # Convert the response to a JSON object
                channel_data = channel_response.json()

                # Get the subscriber count from the response
                if 'items' in channel_data:
                    subscriber_count = channel_data['items'][0]['statistics']['subscriberCount']
                else:
                    subscriber_count = "No data available for this video."

                words1 = title.split()
                num_letters = len(title)
                words2 = description.split()

                with open('information_about_the_video.txt', 'a', encoding='utf-8') as file:
                    file.write(f"Channel_id: {channel_id}")
                    file.writelines(['\n'])
                    file.write(f"Channel name: {channel_name}")
                    file.writelines(['\n'])
                    file.write(f"Subscriber count: {subscriber_count}")
                    file.writelines(['\n'])
                    file.write(f"Title: {title}")
                    file.writelines(['\n'])
                    file.write(f"Number of words in the title: {len(words1)}")
                    file.writelines(['\n'])
                    file.write(f"Number of letters in the title: {num_letters}")
                    file.writelines(['\n'])
                    file.write(f"Views: {views}")
                    file.writelines(['\n'])
                    file.write(f"Likes: {likes}")
                    file.writelines(['\n'])
                    file.write(f"Release Date: {release_date}")
                    file.writelines(['\n'])
                    file.write(f"Duration: {hours}:{minutes}:{seconds}")
                    file.writelines(['\n'])
                    file.write(f"Total number of comments: {total_comments}")
                    file.writelines(['\n'])
                    file.write(f"Number of tags: {len(tags)}")
                    file.writelines(['\n'])
                    file.write(f"Tags: {', '.join(tags)}")
                    file.writelines(['\n'])
                    file.write(f"Number of words in the description: {len(words2)}")
                    file.writelines(['\n'])
                    file.write(f"Description: {description}")
                    file.writelines(['\n'])
                    file.writelines(['\n'])
                    file.writelines(['\n'])

                insert_into_SQLiteTABLE_VideoInformation(counter,channel_id,channel_name,int(subscriber_count), \
                                                         title,len(words1),num_letters,views,likes,release_date,f"Duration: {hours}:{minutes}:{seconds}", \
                                                         total_comments,len(tags),len(words2),description,f"Tags: {', '.join(tags)}",VIDEO_ID)
                counter = counter + 1

            except Exception as e:
                app.PrintInTextBox("There has been an error collecting data") 
                app.PrintInTextBox(e) 
                continue

class ImageAnalysis:
    def __init__(self, counter):
        self.counter = counter
    
    #From https://www.geeksforgeeks.org/find-most-used-colors-in-image-using-python/
    def most_common_used_color(self, img):
        # Get width and height of Image
        width, height = img.size

        # Initialize Variable
        r_total = 0
        g_total = 0
        b_total = 0

        count = 0

        # Iterate through each pixel
        for x in range(0, width):
            for y in range(0, height):
                # r,g,b value of pixel
                r, g, b = img.getpixel((x, y))
                r_total += r
                g_total += g
                b_total += b
                count += 1

        # Calculate average values
        r_avg = r_total/count
        g_avg = g_total/count
        b_avg = b_total/count

        # Convert average values to integers
        r_avg = int(r_avg)
        g_avg = int(g_avg)
        b_avg = int(b_avg)

        return (r_avg, g_avg, b_avg)
    
    def AverageColor(self):
        app.PrintInTextBox("Calculating the average RGB colors")
        for i in range(1, self.counter):
            # Read Image
            img = PIL_Image.open(f"{i}.jpg")

            # Convert Image into RGB
            img = img.convert('RGB')

            # Call function
            common_color = self.most_common_used_color(img)

            with open('most_common_used_color_in_an_image.txt', 'a') as file:
                file.write(f'Average RED: {common_color[0]} Average GREEN: {common_color[1]} Average BLUE: {common_color[2]}\n')
                file.writelines(['\n'])

            update_SQLiteTABLE_average_color(i, common_color[0], common_color[1], common_color[2])
            
    def brightness(self, img):
        # Convert image to NumPy array
        img_array = np.array(img)
        if len(img_array.shape) == 3:
            # Colored RGB or BGR (*Do Not* use HSV images with this function)
            # create brightness with euclidean norm
            return np.average(norm(img_array, axis=2)) / np.sqrt(3)
        else:
            # Grayscale
            return np.average(img_array)
        
    def AverageBrightness(self):
        app.PrintInTextBox("Calculating the average brightness")
        for i in range(1, self.counter):
            img = PIL_Image.open(f"{i}.jpg")
            average_brightness = self.brightness(img)
            with open('average_brightness_in_an_image.txt', 'a') as file:
                file.write(f'Average Brightness {average_brightness}\n')
                file.writelines(['\n'])
                
            update_SQLiteTABLE_average_brightness(i,average_brightness)

    def get_color_name_from_hsl(self, rgb):
        # Convert the RGB value to an sRGB color object
        srgb = sRGBColor(*rgb)

        # Convert the sRGB color object to an HSL color object
        hsl = convert_color(srgb, HSLColor)

        # Get the HSL values
        h, s, l = hsl.hsl_h, hsl.hsl_s, hsl.hsl_l

        # Check for saturation being equal to 0
        if s == 0:
            if l == 0:
                color_name = "black"
            else:
                color_name = "gray" if l < 0.5 else "white"
        else:
            # Use the HSL value to determine the color name
            if 0 <= h < 15:
                color_name = "red"
            elif 15 <= h < 45:
                color_name = "orange"
            elif 45 <= h < 75:
                color_name = "yellow"
            elif 75 <= h < 105:
                color_name = "yellow green"
            elif 105 <= h < 135:
                color_name = "green"
            elif 135 <= h < 165:
                color_name = "turquoise"
            elif 165 <= h < 195:
                color_name = "blue"
            elif 195 <= h < 225:
                color_name = "purple"
            elif 225 <= h < 255:
                color_name = "magenta"
            elif 255 <= h < 285:
                color_name = "pink"
            elif 285 <= h < 315:
                color_name = "red"
            elif 315 <= h < 345:
                color_name = "orange"
            else:
                color_name = "yellow"

        return color_name

    def FastDominantColors(self):
        app.PrintInTextBox("Calculating the most dominant colors")
        for i in range(1, self.counter):
            filename = f"{i}.jpg"
            update_SQLiteTABLE_dominantColors_file_name(i, filename)
            # Load the image and convert it to a NumPy array
            image = PIL_Image.open(filename)
            image_array = np.array(image)

            # Flatten the image into a one-dimensional array
            flattened_image = image_array.reshape(image_array.shape[0] * image_array.shape[1], image_array.shape[2])

            # Use MiniBatchKMeans to cluster the colors
            mbk = MiniBatchKMeans(n_clusters=10, init='k-means++', n_init=10, random_state=0)
            mbk.fit(flattened_image)
            # Sort the clusters by size
            cluster_sizes = np.bincount(mbk.labels_)
            sorted_clusters = sorted(zip(cluster_sizes, mbk.cluster_centers_), key=lambda x: x[0], reverse=True)

            # Take the top N clusters as the dominant colors
            top_n = sorted_clusters[:10]

            a = 1
            # Print the RGB values and sizes of the dominant colors
            try:
                # Print the RGB values and sizes of the dominant colors
                for cluster in top_n:
                    size, color = cluster
                #The size value represents the number of pixels in the image that are closest to the color represented by color.
                #For example, if the size value is 1000, it means that there are 1000 pixels in the image whose colors are closest to color.
                    rgb = (int(color[0]), int(color[1]), int(color[2]))
                    color_name = self.get_color_name_from_hsl(rgb)

                    if a == 1:
                        update_SQLiteTABLE_dominantColors_1(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 2:
                        update_SQLiteTABLE_dominantColors_2(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 3:
                        update_SQLiteTABLE_dominantColors_3(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 4:
                        update_SQLiteTABLE_dominantColors_4(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 5:
                        update_SQLiteTABLE_dominantColors_5(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 6:
                        update_SQLiteTABLE_dominantColors_6(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 7:
                        update_SQLiteTABLE_dominantColors_7(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 8:
                        update_SQLiteTABLE_dominantColors_8(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 9:
                        update_SQLiteTABLE_dominantColors_9(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    elif a == 10:
                        update_SQLiteTABLE_dominantColors_10(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    else:
                        app.PrintInTextBox("Error calculating the most dominant colors")
                    
                    with open('dominant_colors_in_an_image.txt', 'a') as file:
                        file.write(f'Size: {size}, RGB: {color}, dominant: {a}, colorname: {color_name}, file name: {i}.jpg\n')
                    #app.PrintInTextBox(f'Size: {size}, RGB: {color}  dominant:   {a}  colorname:  {color_name}  file name: ' + str(i) + '.jpg')
                    a = a + 1
                with open('dominant_colors_in_an_image.txt', 'a') as file:
                    file.writelines(['\n'])
            except:
                with open('dominant_colors_in_an_image.txt', 'a') as file:
                    file.writelines(f'An unexpected error occurred while processing {i}.jpg\n\n')

    #def DominantColors(self):
        #for i in range(1, self.counter):
            #filename = f"{i}.jpg"
            #update_SQLiteTABLE_dominantColors_file_name(i, filename)
            # Load the image and convert it to a NumPy array
            #image = PIL_Image.open(filename)
            #image_array = np.array(image)

            # Flatten the image into a one-dimensional array
            #flattened_image = image_array.reshape(image_array.shape[0] * image_array.shape[1], image_array.shape[2])

            # Use KMeans to cluster the colors
            #kmeans = KMeans(n_clusters=10, n_init=10, random_state=0).fit(flattened_image)

            # Sort the clusters by size
            #cluster_sizes = np.bincount(kmeans.labels_)
            #sorted_clusters = sorted(zip(cluster_sizes, kmeans.cluster_centers_), key=lambda x: x[0], reverse=True)

            # Take the top N clusters as the dominant colors
            #top_n = sorted_clusters[:10]

            #a = 1
            # Print the RGB values and sizes of the dominant colors
            #try:
                # Print the RGB values and sizes of the dominant colors
                #for cluster in top_n:
                    #size, color = cluster
                #The size value represents the number of pixels in the image that are closest to the color represented by color.
                #For example, if the size value is 1000, it means that there are 1000 pixels in the image whose colors are closest to color.
                    #rgb = (int(color[0]), int(color[1]), int(color[2]))
                    #color_name = self.get_color_name_from_hsl(rgb)

                    #if a == 1:
                        #update_SQLiteTABLE_dominantColors_1(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 2:
                        #update_SQLiteTABLE_dominantColors_2(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 3:
                        #update_SQLiteTABLE_dominantColors_3(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 4:
                        #update_SQLiteTABLE_dominantColors_4(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 5:
                        #update_SQLiteTABLE_dominantColors_5(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 6:
                        #update_SQLiteTABLE_dominantColors_6(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 7:
                        #update_SQLiteTABLE_dominantColors_7(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 8:
                        #update_SQLiteTABLE_dominantColors_8(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 9:
                        #update_SQLiteTABLE_dominantColors_9(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #elif a == 10:
                        #update_SQLiteTABLE_dominantColors_10(i, color_name, f"R: {int(color[0])} G: {int(color[1])} B: {int(color[2])}")
                    #else:
                        #print("a is not 1 - 10 this may be a error")
                    
                    #with open('dominant_colors_in_an_image.txt', 'a') as file:
                        #file.write(f'Size: {size}, RGB: {color}, dominant: {a}, colorname: {color_name}, file name: {i}.jpg\n')
                    #app.PrintInTextBox(f'Size: {size}, RGB: {color}  dominant: {a} colorname: {color_name} file name: ' + str(i) + '.jpg')
                    #a = a + 1
                #with open('dominant_colors_in_an_image.txt', 'a') as file:
                    #file.writelines(['\n'])
            #except:
                #with open('dominant_colors_in_an_image.txt', 'a') as file:
                    #file.writelines(f'An unexpected error occurred while processing {i}.jpg\n\n')

    def Detect_Face(self):
        def detect_face(image_path):
            # Load the cascade
            face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
            # Read the input image 
            img = cv2.imread(image_path)
            # Convert into grayscale
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            # Detect faces
            faces = face_cascade.detectMultiScale(gray, 1.1, 4)
            # If no faces are detected
            if len(faces) == 0:
                return False
            # If faces are detected
            return True
        
        def update_SQLiteTABLE_face_detected(number_of_row, face_detected_bool):
            # Connect to database
            conn = sqlite3.connect('video_information.db')
            cur = conn.cursor()
            cur.execute("UPDATE video_information SET face_detected = ? where number_of_row = ?", (face_detected_bool,number_of_row))
            
            # Save changes and close connection
            conn.commit()
            conn.close()

        app.PrintInTextBox("Detecting faces in thumbnails")

        for i in range(1, self.counter):
            is_face_detected = detect_face(f"{i}.jpg")
            if is_face_detected:
                update_SQLiteTABLE_face_detected(i, f"Yes")
            else:
                update_SQLiteTABLE_face_detected(i, f"No")

def start_button_sound_effect():
    a = ""

    pygame.init()
    pygame.mixer.init()

    mp3_data = base64.b64decode(a)

    mp3_file = BytesIO(mp3_data)

    pygame.mixer.music.load(mp3_file)
    pygame.mixer.music.play()

    while pygame.mixer.music.get_busy() == True:
        continue

    pygame.mixer.quit()

def done_sound_effect():
    a = ""

    pygame.init()
    pygame.mixer.init()

    mp3_data = base64.b64decode(a)

    mp3_file = BytesIO(mp3_data)

    pygame.mixer.music.load(mp3_file)
    pygame.mixer.music.play()

    while pygame.mixer.music.get_busy() == True:
        continue

    pygame.mixer.quit()

class window(CTk):
    def __init__(self):
        super().__init__()

        set_appearance_mode("System")  # Modes: "System" (standard), "Dark", "Light"
        set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

        self.p = inflect.engine()
        self.title("YTVisualizer | Technology IL ft. Orel")

        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        self.wm_iconphoto(False, photo)
        
        self.geometry(f"{1100}x{580}")

        self.grid_columnconfigure(2, weight=1)
        self.grid_rowconfigure((0, 1, 2), weight=1)

        self.list_of_channel_id = []
        self.list_of_channel_name = []
        self.list_of_search_tearms = []

        self.number_of_folder_to_open = 0
        self.number_of_folder_to_open2 = 0
        
        self.Num = StringVar()
        self.Num2 = StringVar()
        self.amount_of_videos_you_want = StringVar()
        self.MsgSubmit = StringVar()

        self.text_var = StringVar()
        self.text_var2 = StringVar()

        self.check = StringVar()
        self.check.set("False")
        
        self.ApiOne = StringVar()
        self.ApiTwo = StringVar()

        self.ApiShowOne = StringVar()
        self.ApiShowTwo = StringVar()

        self.Youtube = StringVar()
        self.Status = StringVar()

        self.Search = StringVar()
        self.Amount = StringVar()
        self.counter = 1
        self.MsgAmount = StringVar()
        self.MsgAmount.set("Number of searches not selected")
        
        self.makewindow()
        self.appearance_mode_optionemenu.set("Dark")
        self.change_appearance_mode_event("Dark")

    def SetApi(self):
        ApiOne = str(self.ApiOne.get())
        ApiTwo = str(self.ApiTwo.get())
        if not ApiOne or not ApiTwo:
            tkinter.messagebox.showerror("ERROR","You didn't enter the API")
            return

        ApiOne = "1)  "+ApiOne+"  "
        self.ApiShowOne.set(ApiOne)
        self.ApiOne.set("")

        
        ApiTwo = "2)  "+ApiTwo+"  "
        self.ApiShowTwo.set(ApiTwo)
        self.ApiTwo.set("")

    def SetNum(self):
        num1 = self.Num.get()
        num = self.Num2.get()
        try:
            int(num);int(num1)
        except:
            tkinter.messagebox.showerror("ERROR","Input must be an integer")
            return

        self.counter = 1
        self.textbox3.configure(state="normal")
        self.textbox3.insert("0.0",f"enter search number {self.p.number_to_words(self.counter)}... \nafter that prees submit \n")
        self.textbox3.configure(state="disabled")

        self.amount_of_videos_you_want.set(num1)
        self.Amount.set(num)
        
        msg = f"Number of videos per channel is {self.Num.get()} \n Number of YouTube searches is {num}"
        self.MsgSubmit.set(msg)

        msg = f"search {self.counter} of {num}"
        self.MsgAmount.set(msg)

    def Next(self):
        if self.tabview.get() == "API seting":
            if not self.ApiShowOne.get() or not self.ApiShowTwo.get():
                tkinter.messagebox.showerror("ERROR","You didn't enter the API")
                return
            self.tabview.set("Number of ...")
        elif self.tabview.get() == "Number of ...":
            self.tabview.set("Search")
        elif self.tabview.get() == "Search":
            self.tabview.set("Start")
        else:
            self.PrintInTextBox("ERROR")
    def Back(self):
        if self.tabview.get() == "Start":
            self.tabview.set("Search")
        elif self.tabview.get() == "Search":
            self.tabview.set("Number of ...")
        elif self.tabview.get() == "Number of ...":
            self.tabview.set("API seting")
        else:
            self.PrintInTextBox("ERROR")

    def Get_All_Input_And_START(self):
        r = threading.Thread(target=self.Get_All_Input_And_START_, args=[])
        r.start()
        
    def Reset(self):
        
        self.list_of_channel_id = []
        self.list_of_channel_name = []
        self.list_of_search_tearms = []

        self.number_of_folder_to_open = 0
        self.number_of_folder_to_open2 = 0
        
        self.Num.set("")
        self.Num2.set("")
        self.amount_of_videos_you_want.set("")
        self.MsgSubmit.set("")

        self.text_var.set("")
        self.text_var2.set("")

        self.check.set("False")
        
        self.ApiOne.set("")
        self.ApiTwo.set("")

        self.ApiShowOne.set("")
        self.ApiShowTwo.set("")

        self.Youtube.set("")
        self.Status.set("")

        self.Search.set("")
        self.Amount.set("")
        self.counter = 1
        self.MsgAmount.set("")
        self.MsgAmount.set("Number of searches not selected")
        tkinter.messagebox.showinfo("info","Reset has complete")
        self.tabview.set("API seting")
        
    def Get_All_Input_And_START_(self):
        start_button_sound_effect()
        try:
            if self.check.get() == "False":
                return
            
            API_KEY_ONE = str(self.ApiShowOne.get())[4:-2] 
            API_KEY_TWO = str(self.ApiShowTwo.get())[4:-2] 

            self.PrintInTextBox("The program started running")

            self.progressbar_1.configure(mode="determinate",determinate_speed= 0.01 , progress_color="green") 
            self.progressbar_1.start()
            self.progressbar_1.set(0.1)
            self.progressbar_1.stop()
            
            YTlinks(self.list_of_channel_id, self.list_of_search_tearms, API_KEY_ONE, int(self.amount_of_videos_you_want.get()))
                    
            self.progressbar_1.set(0.2)
            self.progressbar_1.stop()
            
            thecounter = "nodata"
            thecounter = ThumbnailDownload()

            self.progressbar_1.set(0.4)
            self.progressbar_1.stop()
            SQLiteTABLE()
            ia = ImageAnalysis(int(thecounter))
            VideoInformation(API_KEY_TWO)

            self.progressbar_1.set(0.5)
            self.progressbar_1.stop()

            ia.AverageColor()
            self.progressbar_1.set(0.6)
            self.progressbar_1.stop()
            
            ia.AverageBrightness()
            self.progressbar_1.set(0.7)
            self.progressbar_1.stop()
            
            ia.FastDominantColors()
            self.progressbar_1.set(0.9)
            self.progressbar_1.stop()

            ia.Detect_Face()
            
            sqlite_to_excel("video_information.db", "video_information.xlsx")
                
            self.PrintInTextBox("Moving files into correct folder")
            
            incrementnumberforfoldername = increment_number()
            create_folder_in_current_directory(f"YT_program_files {incrementnumberforfoldername}")
            self.progressbar_1.set(1)

            move_file_to_folder("YTlinks.txt", f"YT_program_files {incrementnumberforfoldername}")
            move_file_to_folder("average_brightness_in_an_image.txt", f"YT_program_files {incrementnumberforfoldername}")
            move_file_to_folder("dominant_colors_in_an_image.txt", f"YT_program_files {incrementnumberforfoldername}")
            try:
                move_file_to_folder("information_about_the_video.txt", f"YT_program_files {incrementnumberforfoldername}")
            except Exception  as e:
                self.PrintInTextBox("There has been a ERROR with information_about_the_video.txt")
                self.PrintInTextBox(e)
            move_file_to_folder("most_common_used_color_in_an_image.txt", f"YT_program_files {incrementnumberforfoldername}")
            move_file_to_folder("video_information.db", f"YT_program_files {incrementnumberforfoldername}")
            move_file_to_folder("video_information.xlsx", f"YT_program_files {incrementnumberforfoldername}")

            for i in range(1, int(thecounter)):
                move_file_to_folder(f"{i}.jpg", f"YT_program_files {incrementnumberforfoldername}")

            self.progressbar_1.set(1)
            self.progressbar_1.stop()

            sleep(2)

            self.progressbar_1.configure(mode="indeterminnate", progress_color=["#3B8ED0", "#1F6AA5"])
            self.progressbar_1.start()
            
            done_sound_effect()
            self.PrintInTextBox("The program has finished collecting all the data and processing it")
            
        except Exception  as e:
            self.PrintInTextBox("There has been a critical ERROR")
            self.PrintInTextBox(e)
            remove_file_in_current_directory("YTlinks.txt")
            remove_file_in_current_directory("average_brightness_in_an_image.txt")
            remove_file_in_current_directory("dominant_colors_in_an_image.txt")
            remove_file_in_current_directory("information_about_the_video.txt")
            remove_file_in_current_directory("most_common_used_color_in_an_image.txt")
            remove_file_in_current_directory("video_information.db")
            remove_file_in_current_directory("video_information.xlsx")
            if thecounter != "nodata":
                for i in range(1, int(thecounter)):
                    remove_file_in_current_directory(f"{i}.jpg")

            self.progressbar_1.configure(mode="indeterminnate", progress_color=["#3B8ED0", "#1F6AA5"])
            self.progressbar_1.start()
            
            tkinter.messagebox.showinfo("ERROR", "MISS VALUE, OR WRONG VALUE")
            
    def StartProssing(self):
        try:
            self.textbox3.configure(state="normal")
            
            if self.counter > int(self.Amount.get()):
                self.textbox3.insert("end", "you finish, pls press next.\n")
                return
            msg = f"search {self.counter} of {self.Amount.get()}"
            self.MsgAmount.set(msg)  
            if len(str(self.Search.get())) < 1 or len(str(self.Search.get())) == " ":
                return 
            element = str(self.Search.get())
            self.textbox3.insert("end", f"search number {self.p.number_to_words(self.counter)} is {element}\n") 
            self.Search.set("") 
            self.list_of_search_tearms.append(element)
                
            if self.counter == int(self.Amount.get()):
                self.counter += 1
                self.check.set("True")
                self.textbox3.insert("end", "you finish, pls press next.\n")
                return
            self.textbox3.configure(state="disabled")
            self.counter += 1
         
        except Exception  as e:
            self.textbox3.configure(state="disabled")  
            self.check.set("False")
            self.PrintInTextBox(e)
            tkinter.messagebox.showinfo("ERROR", "MISS VALUE, OR WRONG VALUE")
        
    def open_input_dialog_event(self):
        dialog = CTkInputDialog(text="Type in a number:", title="CTkInputDialog")
        self.PrintInTextBox(f"CTkInputDialog: {dialog.get_input()}")

    def change_appearance_mode_event(self, new_appearance_mode: str):
        set_appearance_mode(new_appearance_mode)

    def change_scaling_event(self, new_scaling: str):
        new_scaling_float = int(new_scaling.replace("%", "")) / 100
        set_widget_scaling(new_scaling_float)

    def number_of_file_dialog(self):
        dialog = CTkInputDialog(text="Type in the number of file you want to analyse:", title="Number Of File Dialog")
        self.number_of_folder_to_open = dialog.get_input()
        self.text_var.set(value=f"number of folder to open {self.number_of_folder_to_open}")
        self.PrintInTextBox(f"The_first_nmber_of_folder_to_open {self.number_of_folder_to_open}")

    def number_of_file_dialog2(self):
        dialog = CTkInputDialog(text="Type in the number of file you want to analyse:", title="Number Of File Dialog")
        self.number_of_folder_to_open2 = dialog.get_input()
        self.text_var2.set(value=f"number of folder to open {self.number_of_folder_to_open2}")
        self.PrintInTextBox(f"The_second_nmber_of_folder_to_open {self.number_of_folder_to_open2}")

    def number_of_most_common_colors(self):
        dialog = CTkInputDialog(text="Type in the number of most common colors you want to analyse from 1-10:", title="Number Of File Dialog")
        number_of_colorname = dialog.get_input()
        number_of_colorname = int(number_of_colorname)
        number_of_colorname = number_of_colorname - 1
        create_pie_charts_for_colorname(self.number_of_folder_to_open, number_of_colorname)

    def release_date_menu_window(self):
        window = CTkToplevel(self)
        window.geometry("340x300")
        window.title("Best Date Menu")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        self.button2 = CTkButton(window, text="Best Upload Time", command= lambda: UploadTime_ViewsGraph(self.number_of_folder_to_open))
        self.button2.place(relx=0.25, rely=0.1, anchor=tkinter.CENTER)

        self.button2 = CTkButton(window, text="Best Release Date", command= lambda: ReleaseDate_ViewsGraph(self.number_of_folder_to_open))
        self.button2.place(relx=0.7, rely=0.1, anchor=tkinter.CENTER)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.48, rely=0.6, anchor=tkinter.CENTER)

        textbox.configure(width=290, state="normal")
        textbox.insert("0.0", "Best Date Menu: \n" + "In this window, you have the option to choose \n" + 
                            "from two informative graphs -  \n" + 
                            "the Best Upload Time graph and the Best \n" +
                            "Release Date graph. \n" +
                            "The first graph compares the upload time  \n" + 
                            "to the number of views the video receives, \n" + 
                            "while the second graph compares the release \n" + 
                            "date to the number of views. \n" +
                            "With this data, you can gain valuable insights \n" + 
                            "on the ideal time to upload your videos \n" +
                            "and optimize your content for maximum views. \n")
        textbox.configure(state="disabled")

    def The_Full_Story_window(self):
        window = CTkToplevel(self)
        window.geometry("800x450")
        window.title("The Full Story")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=780, height=430, state="normal")
        textbox.insert("0.0", "The full story of “YouTube Visualizer“ \n" + "\n"
                            "The idea of YouTube Visualizer (YTV) came to me while I was in the shower on December 26, 2022. It \n" + 
                            "was initially envisioned as a tool to aid in my creation of a documentary on “How YouTube Works“. I had \n" +
                            "a desire to delve into the reasons behind the success of videos on the platform and to uncover tips and \n" +
                            "tricks that others could use to replicate that success. \n" + 
                            " \n" + 
                            "My initial plan was to manually gather information from various videos, but after starting the project on \n" + 
                            "December 29, 2022, I quickly realized that this method was not feasible. This led me to the conclusion \n" +
                            "that I needed to automate the process in order to gather the necessary data. \n" + 
                            " \n" +
                            "My aim was to create a program that would gather information on videos, including their view and like \n" +
                            "count excreta, and present the data in an excel sheet for analysis. I drew up a plan that involved several \n" +
                            "stages of development, including the creation of a program to obtain URLs from YouTube, and two more \n" + 
                            "programs, one to gather data on videos and the other to download video thumbnails and gather their \n" + 
                            "data, including thumbnail brightness. The final program would then combine all of this data and store it \n" + 
                            "in a database, which would then be converted into an excel sheet. I estimated that the entire process \n" +
                            "would take 2-3 weeks. Nevertheless, I got to work and started programming, armed with my roadmap \n" + 
                            "and determination. \n" +
                            " \n" +
                            "The development of YouTube Visualizer (YTV) was a challenging but rewarding process. In the first days \n" +
                            "of development, I was able to get the basic functionality working. On January 11, 2023, I combined all \n" + 
                            "the functionalities into one program, and with the help of a friend, I was able to add a basic GUI using \n" + 
                            "the Tkinter library by January 15, 2023. However, I was not satisfied with the limited functionality and \n" + 
                            "the look of the Tkinter library. I searched for an alternative and eventually found the CustomTkinter \n" +
                            "library which met my requirements. On January 20, 2023, my friend and I had the new GUI up and \n" + 
                            "running, but the program still needed a lot of work, including the addition of graphs to analyze the data. \n" +
                            " \n" +
                            "During the following eight days, I continued to refine the program by adding crucial features. However, I \n" +
                            "soon realized that the program still needed database management and error protection capabilities. I \n" + 
                            "dedicated the next two days to these tasks and successfully completed them by January 30, 2023. With \n" + 
                            "the main capabilities of YTV finally complete, all that was left were some finishing touches, such as \n" + 
                            "documentation, a functional progress bar, and creation of an exe file. What started as a modest two-to \n" +
                            "three-week project eventually took over a month to complete.  \n" + 
                            " \n" +
                            "Today, on May 21, 2023, I am delighted to announce that I have successfully completed my long-standing \n" +
                            "project. As mentioned earlier in the story, little did I realize the extent of the remaining \n" +
                            "work at that time. However, through sheer determination, perseverance, and countless hours of \n" +
                            "effort, I have now accomplished the monumental task of creating a fully functional executable program. \n" +
                            "The journey to completion demanded unwavering commitment and was accompanied by its fair share of challenges \n" +
                            "and moments of exhaustion. Nevertheless, the immense joy and satisfaction derived from knowing \n" +
                            "that people can now actively utilize and benefit from my program outweigh any obstacles faced along the way. \n" + 
                            " \n" +
                            "This is the tale of YouTube Visualizer, a technologically advanced project that pushed boundaries and \n" +
                            "reached new heights. \n" +
                            " \n" + 
                            "I would like to express my heartfelt gratitude to all the individuals who assisted me throughout this \n" + 
                            "journey. Special thanks go to my friend, whose invaluable support in developing the graphical user \n" + 
                            "interface and troubleshooting various bugs was instrumental in bringing this program to fruition. \n" + 
                            "Their dedication and collaboration played a crucial role in making this project a reality. \n" + 
                            "Thank you to everyone involved for their unwavering support and contribution. \n" + 
                            " \n" + 
                            " \n" +
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def About_YTVisualizer_window(self):
        window = CTkToplevel(self)
        window.geometry("800x450")
        window.title("About YTVisualizer")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=780, height=430, state="normal")
        textbox.insert("0.0", "About YTVisualizer: \n" + "\n"
                            "The program utilizes an API input provided by the user to search and retrieve videos from YouTube channels. \n" + 
                            "It then proceeds to download the video thumbnails and performs a thorough analysis on them. \n" +
                            "Additionally, the program gathers information from all the videos \n" +
                            "and uses it to calculate statistics which are then saved in a database for future reference. \n" + 
                            " \n" + 
                            " \n" + 
                            "After giving the program 2 API keys or the same one twice. \n" + 
                            "The program has the following option to gather data from youtube: \n" + 
                            " \n" + 
                            "1) Number of videos per channel \n" + 
                            "2) Number of YouTube searches \n" + 
                            "3) The searches for YouTube \n" + 
                            " \n" + 
                            " \n" + 
                            "The program gathers the following information on the videos: \n" + 
                            " \n" + 
                            "1) channel id \n" + 
                            "2) channel name \n" + 
                            "3) subscriber count \n" + 
                            "4) title \n" + 
                            "5) number of words in the title \n" + 
                            "6) number of letters in the title \n" + 
                            "7) views \n" + 
                            "8) likes \n" + 
                            "9) release date \n" + 
                            "10) Duration \n" + 
                            "11) total comments \n" + 
                            "12) number of tags \n" + 
                            "13) number of words in the description \n" + 
                            "14) average brightness of the thumbnail \n" + 
                            "15) average red of the thumbnail \n" + 
                            "16) average green of the thumbnail \n" + 
                            "17) average blue of the thumbnail \n" + 
                            "18) description \n" + 
                            "19) Tags \n" + 
                            "20) and the top 10 most common colors in the thumbnail \n" + 
                            "21) detects if there is a face in the thumbnail \n" + 
                            " \n" + 
                            " \n" + 
                            "The different types of graphs you can do with the program: \n" + 
                            " \n" + 
                            "1) Views VS Brightness \n" + 
                            "2) Most Common Colors Graphs \n" + 
                            "3) Best Length Of Title \n" + 
                            "4) Best Duration For Video \n" + 
                            "5) Subscriber Count Graph \n" + 
                            "6) Likes Graph \n" +
                            "7) Tags Graph \n" +
                            "8) Best Upload Time \n" +
                            "9) Best Release Date \n" +
                            " \n" +
                            "The program also creates a SQLite file and an Excel file.  \n" +
                            "You can use these files to analyze the data yourself and create graphs to your preference. \n" +
                            " \n" +
                            " \n" +
                            "The program also has multiple options to manage the databases: \n" +
                            " \n" +
                            "1) Combine Databases \n" +
                            "2) Delete Duplicate Rows \n" +
                            "3) Database To Excel \n" +
                            "4) Number Of Rows in database \n" +
                            " \n" +
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def How_It_Works_window(self):
        window = CTkToplevel(self)
        window.geometry("920x450")
        window.title("How The Program Works")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=890, height=430, state="normal")
        textbox.insert("0.0", "How The Program Works: \n" + "\n"
                            "The YTV program is a sophisticated tool with a multitude of functions. \n" +
                            "While I won't delve into every intricacy, I can provide an overview of its primary components, focusing on the process \n" +
                            "of gathering YouTube data and analyzing it. \n" +
                            " \n" +
                            "Now, I will guide you through a step-by-step explanation of the data gathering and analysis process. \n" +
                            " \n" +
                            "1) Once the user inputs all the required information and initiates the process by clicking the start button, the YTV program will start runing. \n" +
                            " \n" +
                            "2) the programs will call the 'YTlinks' function that dose the folowing: \n" +
                            "The function YTlinks is designed to retrieve YouTube video links based on search terms, using the YouTube Data API. \n" +
                            "Here is an explanation of how the function works: \n" +
                            " \n" +
                            "The function takes four parameters: list_of_channel_id1, list_of_search_tearms1, api_key1, \n"+
                            "and amount_of_videos_you_want. These parameters are used to pass necessary inputs to the function. \n" +
                            "The function begins by iterating over each search term in list_of_search_tearms1 using a for loop. \n" +
                            "Within the loop, there is a nested function called get_video_links. This function takes a search term as an argument and performs a \n" +
                            "search on YouTube by constructing a URL with the encoded search term. It retrieves the HTML content of the search results page and uses regular \n" +
                            "expressions to extract the video IDs from the page. These video IDs are then used to construct the YouTube video links. \n" +
                            "The function returns a list of unique video links. \n" +
                            "Another nested function called get_channel_links is defined. This function takes the list of video links and the API key as inputs. \n" +
                            "It iterates over each video link and extracts the channel ID associated with the video by making a request to the YouTube API. \n" +
                            "The extracted channel IDs are stored in a list and used to construct channel links. The function returns a list of channel IDs. \n" +
                            "The third nested function is get_videos. This function takes the list of channel IDs, the number of videos to retrieve, and the API key as inputs. \n" +
                            "It loops through each channel ID and constructs an API URL with the channel ID and desired number of videos. \n" +
                            "It makes a GET request to the YouTube Data API and retrieves the response as JSON. \n" +
                            "It then extracts the video IDs and titles from the response and appends the video IDs to a list. Finally, the function returns the list of video IDs. \n" +
                            "Back in the main function, YTlinks, the get_video_links function is called with the current search term to retrieve a list of video links. \n" +
                            "The get_channel_links function is then called with the video links and the API key to obtain a list of channel IDs. \n" +
                            "The get_videos function is called with the channel IDs, the desired number of videos, and the API key to retrieve a list of video IDs. \n" +
                            "Each video ID obtained from get_videos is checked if it already exists in list_of_channel_id1. If not, it is appended to the list. \n" +
                            "If an error occurs during the process (such as an invalid API key), the program catches the exception, prints an error message, \n" +
                            "and continues to the next search term. After iterating over all the search terms, the function opens a file named 'YTlinks.txt' in append mode. \n" +
                            "It writes each video link from list_of_channel_id1 (in the format 'https://www.youtube.com/watch?v=<video_id>') to the file, with each link on a new line. \n" +
                            "The function completes, and the file 'YTlinks.txt' now contains the collected YouTube video links. \n" +
                            " \n" +
                            "Overall, the function performs a search for each provided term, extracts the video links, retrieves the associated channel IDs, \n" +
                            "and then fetches a specified number of video IDs for each channel. The resulting video IDs are appended to a list, and the function writes them \n" +
                            "to a file for further use or analysis.  \n" +
                            " \n" +
                            "3) After gathering the YouTube video links using the 'YTlinks' function, the program proceeds to run the 'ThumbnailDownload' function responsible \n" +
                            "for downloading the corresponding video thumbnails.  \n" +
                            "Here is a explanation of how the function works:  \n" +
                            " \n" +
                            "The function begins by initializing a counter variable, counter1, to keep track of the number of YouTube URLs encountered. \n" +
                            "It opens a text file named 'YTlinks.txt' in read mode. \n" +
                            "The function reads each line of the file one by one. \n" +
                            "For each line, it checks if it matches a specific pattern of a YouTube video link using a regular expression. The pattern ensures that the line starts with \n" +
                            "'https://www.youtube.com/watch?v=' followed by 11 alphanumeric characters. \n" +
                            "If a line matches the pattern and is indeed a YouTube video link, the function proceeds to download the thumbnail of the video. \n" +
                            "It creates a Thumbnail object, passing the YouTube video link as an argument. \n" +
                            "The fetch method of the Thumbnail object is called to download the thumbnail image. \n" +
                            "The save method of the Thumbnail object is called to save the downloaded thumbnail image to the current directory. The counter variable, \n" +
                            "counter1, is used to generate a unique name for each downloaded thumbnail. \n" +
                            "After saving the thumbnail, the counter variable is incremented by 1 to keep track of the number of thumbnails downloaded. \n" +
                            "The function continues to the next line in the file and repeats the process until all lines have been processed. \n" +
                            "Finally, the function prints the total number of thumbnails downloaded and returns the value of counter1. \n" +
                            " \n" +
                            "In simpler terms, the function reads a file that contains YouTube video links. \n" +
                            "It checks each line to see if it is a YouTube video link and, if it is, downloads the thumbnail image of that video. It saves the thumbnail in the \n" +
                            "current directory and keeps count of the number of thumbnails downloaded. At the end, it prints the total number of thumbnails downloaded. \n" +
                            " \n" +
                            "4) Once all the thumbnails have been successfully downloaded, the program calls the 'SQLiteTABLE' function to create an SQLite database. \n" +
                            "This database serves as a centralized storage to store all the information we will gather. \n" +
                            "The function operates by creating a file named 'video_information.db' and establishing a table named 'video_information' within it. \n" +
                            "This table is designed to accommodate all the pertinent columns required to store the extensive data we will collect during the process. \n" +
                            " \n" +
                            "5) next we will run the 'VideoInformation' function.  \n" +
                            "This code reads YouTube video IDs from a file named YTlinks.txt and retrieves information about those videos using the YouTube Data API. \n" +
                            "The information retrieved includes the title, number of views, length, release date, description, and tags of the video, as well as the number of \n" +
                            "likes, comments, and the subscriber count of the channel that posted the video. \n" +
                            "The duration of the video is retrieved using a separate request to the YouTube Data API, as it is not included in the initial request. \n" +
                            "The duration is then parsed and split into hours, minutes, and seconds. Finally, the function populates the database with all \n" +
                            "the gathered information, while incorporating error detection capabilities to ensure data collection worked. \n" +
                            " \n" +
                            "Overall, this function is useful for retrieving information about YouTube videos. \n" +
                            "However, it requires a valid YouTube API key to function, which must be provided to the VideoInformation function. \n" +
                            " \n" +
                            "6) Next we call the 'AverageColor' function. \n" +
                            "This function calculates the average RGB (Red, Green, Blue) values of the the YouTube thumbnails we have gathered. \n" +
                            "To calculate the average RGB values, the code first iterates through each pixel of the image. \n" +
                            "It retrieves the individual RGB values of each pixel using the getpixel method. \n" +
                            "Then, it accumulates the sum of the RGB values for all the pixels and keeps track of the number of pixels. \n" +
                            "After iterating through all the pixels, the code calculates the average RGB values by dividing the total sum of each color \n" +
                            "channel by the number of pixels. It converts these average values to integers. \n" +
                            "The calculated average RGB values are then returned as a tuple containing three integers: \n" +
                            "the average red value, the average green value, and the average blue value. \n" +
                            "The AverageColor function processes multiple images (assumed to be stored as files named '1.jpg', '2.jpg', etc.). \n" +
                            "It opens each image, converts it to the RGB color mode if needed, and calls the most_common_used_color function to calculate the average RGB values. \n" +
                            "The calculated values are then written to a file and stored in a SQLite database. \n" +
                            " \n" +
                            "Overall, this code provides a way to determine the average color of each image by calculating the average RGB values. \n" +
                            " \n" +
                            "7) Next we call the 'AverageBrightness' function. \n" +
                            "This function calculates the average brightness of an image. The image is provided as an input to the AverageBrightness function. \n" +
                            "To calculate the average brightness, the code first opens the image using the PIL library and assigns it to the img variable. \n" +
                            "Then, the code calls the brightness function, passing the img variable as an argument. \n" +
                            "The brightness function calculates the brightness of the image and returns a single value representing the average brightness. \n" +
                            "The calculated average brightness value is then written to a file named 'average_brightness_in_an_image.txt' and stored in a SQLite database. \n" +
                            "This is done for each image in a loop, where the images are assumed to be stored as files named '1.jpg', '2.jpg', and so on. \n" +
                            "The purpose of this code is to analyze the brightness of multiple images and record the average brightness of each image. \n" +
                            "The average brightness can provide insights into the overall lightness or darkness of the image. \n" +
                            " \n" +
                            "8) Next we call the 'FastDominantColors' function. \n" +
                            "This function calculates the most dominant colors in an image. It processes multiple images one by one. \n" +
                            "For each image, it performs the following steps: \n" +
                            " \n" +
                            "It opens the image file and converts it to a NumPy array, which represents the image's pixel colors. \n" +
                            "The array is flattened into a one-dimensional array, which makes it easier to analyze. \n" +
                            "The MiniBatchKMeans algorithm is used to cluster similar colors together. It groups the colors into clusters based on their similarity. \n" +
                            "The clusters are sorted by size, which represents the number of pixels in the image that belong to each cluster. \n" +
                            "The top 10 clusters with the largest sizes are considered the dominant colors in the image. \n" +
                            "For each dominant color, the RGB values and color name are determined. The RGB values represent the intensities of red, green, and blue in the color. \n" +
                            "The color name is determined based on the HSL (Hue, Saturation, Lightness) values of the color. \n" +
                            "Different ranges of H values correspond to different color names. \n" +
                            "The dominant color information, including the color name and RGB values, is stored in a SQLite database. \n" +
                            "The process is repeated for each image in a loop. \n" +
                            "Additionally, the code writes the dominant color information to a file named 'dominant_colors_in_an_image.txt' for further reference. \n" +
                            " \n" +
                            "The purpose of this code is to analyze the top 10 most dominant colors in a image and record the RGB values and color names. \n" +
                            "This can be useful for various applications like image categorization, color analysis, and visualization. \n" +
                            " \n" +
                            "9) Next we call the 'Detect_Face' function. \n" +
                            "This function detects faces in images. It processes multiple images one by one. \n" +
                            "For each image, it performs the following steps: \n" +
                            " \n" +
                            "It defines a function called detect_face that takes the path of an image as input. \n" +
                            "Inside the detect_face function, it loads a pre-trained face detection model called 'haarcascade_frontalface_default.xml' using the OpenCV library. \n" +
                            "It reads the input image and converts it to grayscale, which simplifies the face detection process. \n" +
                            "It uses the face detection model to detect faces in the grayscale image. \n" +
                            "If any faces are detected, it returns True; otherwise, it returns False. \n" +
                            "It defines another function called update_SQLiteTABLE_face_detected that updates the 'face_detected' column in a SQLite database for a \n" +
                            "given row number with the face detection result. \n" +
                            "The main part of the code starts by printing a message indicating that it's detecting faces in thumbnails. \n" +
                            "It then loops through a range of numbers representing the image file names (1.jpg, 2.jpg, etc.). \n" +
                            "For each image, it calls the detect_face function to check if a face is detected. \n" +
                            "If a face is detected, it updates the corresponding row in the SQLite database with 'Yes' in the 'face_detected' column. \n" +
                            "If no face is detected, it updates the corresponding row with 'No' in the 'face_detected' column. \n" +
                            " \n" +
                            "The purpose of this code is to analyze a series of images and determine if there are any faces present in each image. \n" +
                            "It uses a pre-trained face detection model to perform this task and updates a SQLite database with the face detection results \n" +
                            "for further analysis or processing. \n" +
                            " \n" +
                            "10) Now we will performs several file operations and handles potential errors. \n" +
                            "Here's a simple explanation of how this code works: \n" +
                            " \n" +
                            "The function 'sqlite_to_excel' is called. This function takes a SQLite database file called 'video_information.db' and \n" +
                            "converts it into an Excel file named 'video_information.xlsx'. \n" +
                            "The program prints a message saying 'Moving files into correct folder'. \n" +
                            "It generates a unique folder name by incrementing a number. \n" +
                            "It creates a new folder with the generated name. \n" +
                            "It moves several all the files to the newly created folder. \n" +
                            "It plays a sound effect indicating that the program has finished processing. \n" +
                            "The program prints a message saying 'The program has finished collecting all the data and processing it'. \n" +
                            " \n" +
                            "If there is an exception (error) during the execution of the code, it enters the except block. \n" +
                            "It prints an error message indicating a critical error. \n" +
                            "It removes several files that were created or moved earlier. \n" +
                            "It shows a message box displaying an error message. \n" +
                            " \n" +
                            "In summary, this code performs file operations such as moving files to a new folder, handling errors, and displaying messages to the user. \n" +
                            "And its the last piece of code that finishes collecting all of the data and processing it. \n" +
                            " \n" +
                            " \n" +
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def Simple_User_Manual_window(self):
        window = CTkToplevel(self)
        window.geometry("920x450")
        window.title("Simple User Manual")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=890, height=430, state="normal")
        textbox.insert("0.0", "Simple User Manual: \n" + "\n"
                            "Upon launching the main window, you will be greeted by the user interface menu. \n" +
                            "The primary input area will be visible, where you are required to enter your first and second API keys. \n" + 
                            "To acquire these YouTube APIs, a dedicated section in the documentation guides you through the process. \n" + 
                            "Once you have entered your API keys, click the “Set Your API“ button to save them. \n" + 
                            "Next, press the “Next“ button to proceed. You will now have the option to specify the number of videos per channel and the number of YouTube searches. \n" + 
                            "The “number of YouTube searches“ refers to the number of search terms you wish to explore. \n" + 
                            "The “videos per channel“ parameter determines the maximum number of latest videos to be retrieved from each discovered channel. \n" + 
                            "After entering these values, click the “Submit“ button, followed by the “Next“ button. \n" + 
                            "In this step, you can input your desired YouTube search terms into the text box. \n" + 
                            "After entering each search term, click “Submit“. Repeat this process until you have submitted all your desired searches, matching the count \n" + 
                            "specified in the “number of YouTube searches“ input. \n" + 
                            "Then, press “Next“. \n" + 
                            "You now have the option to either press “Start“ to initiate the program or “Reset“ to return to the first tab and re-enter the information. \n" + 
                            "If you choose to click “Start“, the program will begin execution, which may take some time. \n" + 
                            "Please refrain from closing the program while it is running. \n" + 
                            "To track the program's progress, refer to the progress bar at the bottom of the window. \n" + 
                            "Additionally, the bottom text box will provide real-time updates on the program's activities and any encountered errors. \n" + 
                            "Upon successful completion, the program will display the message: “The program has finished collecting all the data and processing it“. \n" + 
                            " \n" + 
                            "Once the program has finished running, it will create a file containing all the collected information. \n" + 
                            "Each time you run the program, the file number will increment (1, 2, 3, and so on). \n" + 
                            "To locate the file, access the program menu on the left side of the main screen and click the “Open File Location“ button. \n" + 
                            "The folder with the highest number corresponds to the data from the most recent successful run of the program. \n" + 
                            " \n" + 
                            " \n" + 
                            "On the left-hand side, you will find the program menu offering the following options: \n" + 
                            " \n" + 
                            "1) Data Analysis \n" + 
                            "Within this window, you can effortlessly specify the folder number you wish to analyze. \n" + 
                            "Simply click the “Open Dialog“ button and input the desired number. \n" + 
                            "The program provides built-in tools for basic analysis, and for more comprehensive analysis, you can utilize the Excel and SQLite \n" + 
                            "files located within the program's created folder.  \n" + 
                            " \n" + 
                            "2) Manage Databases \n" + 
                            "This window enables easy management of the program's created databases. \n" + 
                            "You have various options such as combining multiple databases, removing duplicate rows, exporting the database to Excel, and obtaining a \n" + 
                            "quick overview of the total number of rows in the database. \n" + 
                            "By default, the selected database for management is from “Open Dialog 1“. \n" + 
                            "However, the “Combine Databases“ function allows you to select additional databases through “Open Dialog 2“ and seamlessly \n" + 
                            "merge them into one comprehensive database. \n" + 
                            " \n" + 
                            "3) Open File Location \n" + 
                            "Clicking this option will open the file location where the program saves all its files and documents. \n" + 
                            " \n" + 
                            "4) About TechnologyIL \n" + 
                            "Selecting this option opens a window providing information about TechnologyIL. \n" + 
                            " \n" + 
                            "5) Documentation \n" + 
                            "By choosing this option, a window will open with a list of buttons, each containing specific documentation for your reference. \n" + 
                            " \n" + 
                            " \n" +
                            "Additionally, the user interface offers the following options for customization: \n" +
                            "Appearance Mode - Light, Dark, System. \n" +
                            "UI Scaling - 90%, 100%, 105%. \n" +
                            " \n" +
                            " \n" +
                            " \n" +
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def Long_User_Manual_window(self):
        window = CTkToplevel(self)
        window.geometry("920x450")
        window.title("Long User Manual")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=890, height=430, state="normal")
        textbox.insert("0.0", "Long User Manual: \n" + "\n"
                            "Upon launching the main window, you will be greeted by the user interface menu. \n" +
                            "The primary input area will be visible, where you are required to enter your first and second API keys. \n" + 
                            "Getting the YouTube API key -  \n" + 
                            "Step 1: \n" + 
                            "Log in to Google Developers Console (https://console.cloud.google.com/) \n" + 
                            " \n" + 
                            "Step 2:  \n" + 
                            "Now, you have to create a new project on the developer console. To create a new project, click on the dropdown menu at the \n" +
                            "top of the page labeled “Select a project”. \n" + 
                            "Then click “New Project“, and enter the project name, select your organization (if applicable), and then click “Create“. \n" + 
                            " \n" + 
                            "Step 3: \n" + 
                            "Once your project is created, you'll need to enable the YouTube Data API in order to access its functionality. \n" + 
                            "To do this, go to your project and click on the “APIs & Services” menu on the left-hand side of the console. \n" +
                            "From here, click the “Enable APIs and Services” button. \n" +  
                            "Then look for “YouTube Data API V3”. You can either search it from the search box or simply scroll down. \n" + 
                            "Up next, click on the “YouTube Data API V3” API and click the “Enable” button. \n" + 
                            " \n" + 
                            "Step 4: \n" + 
                            "After enabling the API, you'll need to create credentials to authenticate your application when it makes requests to the API. \n" + 
                            "To create credentials, click on the “Create credentials” button on the API Dashboard page, and \n" + 
                            "select “YouTube Data API v3” from the dropdown menu.  \n" + 
                            "Then, choose “Public data” and click on “Next”. \n" + 
                            "Then it will take around 2-3 seconds and you'll get your API key. Once the API key is \n" + 
                            "generated, copy it and paste it into the YTV program. \n" +
                            "After copying the API key, click on “Done”. This will enable YTV to access the YouTube API and make requests.\n" + 
                            " \n" + 
                            "credit: https://docs.themeum.com/tutor-lms/tutorials/get-youtube-api-key/ \n" + 
                            " \n" + 
                            " \n" + 
                            "Here are a few things to keep in mind regarding the YouTube API in the program: \n" + 
                            " \n" + 
                            "1) The program asks for two API keys, but you can enter the same API key in both input fields. \n" + 
                            " \n" + 
                            "2) If you want to use two API keys, you can create two different email accounts and generate two separate API keys.  \n" + 
                            " \n" + 
                            "3) Even if the program is given a valid API key, it can stop working because the API has a limit of 10,000 requests per day. \n" + 
                            " \n" + 
                            "Once you have entered your API keys, click the “Set Your API“ button to save them. \n" + 
                            "Next, press the “Next“ button to proceed. You will now have the option to specify the number of videos per channel and the number of YouTube searches. \n" + 
                            "The “number of YouTube searches“ refers to the number of search terms you wish to explore. \n" + 
                            "The “videos per channel“ parameter determines the maximum number of latest videos to be retrieved from each discovered channel. \n" + 
                            "After entering these values, click the “Submit“ button, followed by the “Next“ button. \n" + 
                            "In this step, you can input your desired YouTube search terms into the text box. \n" + 
                            "After entering each search term, click “Submit“. Repeat this process until you have submitted all your desired searches, matching the count \n" + 
                            "specified in the “number of YouTube searches“ input. \n" + 
                            "Then, press “Next“. \n" + 
                            "You now have the option to either press “Start“ to initiate the program or “Reset“ to return to the first tab and re-enter the information. \n" + 
                            "If you choose to click “Start“, the program will begin execution, which may take some time. \n" + 
                            "Please refrain from closing the program while it is running. \n" + 
                            "To track the program's progress, refer to the progress bar at the bottom of the window. \n" + 
                            "Additionally, the bottom text box will provide real-time updates on the program's activities and any encountered errors. \n" + 
                            "Upon successful completion, the program will display the message: “The program has finished collecting all the data and processing it“. \n" + 
                            " \n" + 
                            "Once the program has finished running, it will create a file containing all the collected information. \n" + 
                            "Each time you run the program, the file number will increment (1, 2, 3, and so on). \n" + 
                            "To locate the file, access the program menu on the left side of the main screen and click the “Open File Location“ button. \n" + 
                            "The folder with the highest number corresponds to the data from the most recent successful run of the program. \n" + 
                            " \n" + 
                            " \n" + 
                            "On the left-hand side, you will find the program menu offering the following options: \n" + 
                            " \n" + 
                            "1) Data Analysis \n" + 
                            "Within this window, you can effortlessly specify the folder number you wish to analyze. \n" + 
                            "Simply click the “Open Dialog“ button and input the desired number. \n" + 
                            "The program provides built-in tools for basic analysis, and for more comprehensive analysis, you can utilize the Excel and SQLite \n" + 
                            "files located within the program's created folder.  \n" + 
                            " \n" + 
                            "The available analysis options are as follows: \n" + 
                            " \n" + 
                            " - Views VS Brightness \n" + 
                            "This option displays a graph illustrating the relationship between the number of views a video received and the brightness of its thumbnail. \n" + 
                            " \n" + 
                            " -  Most Common Colors \n" + 
                            "For each of the ten most common colors used, this option generates a pi graph showcasing the most common colors used. \n" + 
                            " \n" + 
                            " - Best Length Of Title \n" + 
                            "A 3D graph depicts the correlation between the number of words in the video title, the number of letters in \n" + 
                            "the title, and the corresponding number of views. \n" + 
                            " \n" +
                            " - Best Duration For Video \n" + 
                            "This graph explores the relationship between the duration of a video and the number of views it garnered. \n" + 
                            " \n" + 
                            " - Subscriber Count Graph \n" + 
                            "This analysis option presents a graph plotting the subscriber count of a channel against the number of views received on its video. \n" + 
                            " \n" + 
                            " - Likes Graph \n" + 
                            "A graph is generated to illustrate the correlation between the number of likes a video received and its respective number of views. \n" +
                            " \n" +
                            " - Tags Graph \n" +
                            "This graph showcases the relationship between the number of tags associated with a video and the number of views it accumulated. \n" +
                            " \n" + 
                            " - Best Date Menu \n" +
                            "This option provides two graphs. The first graph compares the release date of videos to their corresponding number of views, while \n" +
                            "the second graph compares the time of day the videos were released to the number of views. \n" +
                            " \n" +
                            "These analysis options allow you to gain valuable insights and draw correlations from various aspects of your video content. \n" +
                            " \n" + 
                            "2) Manage Databases \n" + 
                            "This window enables easy management of the program's created databases. \n" + 
                            "You have various options such as combining multiple databases, removing duplicate rows, exporting the database to Excel, and obtaining a \n" + 
                            "quick overview of the total number of rows in the database. \n" + 
                            "By default, the selected database for management is from “Open Dialog 1“. \n" + 
                            "However, the “Combine Databases“ function allows you to select additional databases through “Open Dialog 2“ and seamlessly \n" + 
                            "merge them into one comprehensive database. \n" + 
                            " \n" + 
                            "3) Open File Location \n" + 
                            "Clicking this option will open the file location where the program saves all its files and documents. \n" + 
                            " \n" + 
                            "4) About TechnologyIL \n" + 
                            "Selecting this option opens a window providing information about TechnologyIL. \n" + 
                            " \n" + 
                            "5) Documentation \n" + 
                            "By choosing this option, a window will open with a list of buttons, each containing specific documentation for your reference. \n" + 
                            " \n" + 
                            " \n" +
                            "Additionally, the user interface offers the following options for customization: \n" +
                            "Appearance Mode - Light, Dark, System. \n" +
                            "UI Scaling - 90%, 100%, 105%. \n" +
                            " \n" +
                            " \n" +
                            "Here are some troubleshooting tips for the program: \n" + "\n"
                            "1) Make sure you are using a valid API key for the YouTube API, and it is the official API key from Google. \n" + 
                            " \n" +
                            "2) Even if the program is given a valid API key, it can stop working because the API has a limit of 10,000 requests per day. \n" + 
                            " \n" + 
                            "3) Ensure that the number of videos per channel is not more than 49 because that is the API limit. \n" + 
                            " \n" + 
                            "4) Make sure you are connected to the internet. \n" + 
                            " \n" +  
                            "5) Do not ask for too many searches, as the YouTube API you provided will run out of requests, causing the program to stop. \n" + 
                            " \n" + 
                            "6) Do not ask for too many searches or videos per channel, as the YouTube API you provided will run out of \n" + 
                            "requests, causing the program to stop. \n" +
                            " \n" + 
                            "7) If you spam press the start button, the program will crash. \n" + 
                            " \n" + 
                            "8) If a message box opens, it will tell you what the issue is with what you are doing, and you can use that to troubleshoot. \n" + 
                            " \n" + 
                            "9) Sometimes, if you are having an issue with the program, the error message will be in the main message box in the \n" + 
                            "center of the program.  \n" + 
                            " \n" + 
                            " \n" + 
                            " \n" +
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def Open_link_to_github(self):
        webbrowser.open('https://github.com/TechnologyIL/YouTubeVisualizer')

    def Data_Storage_window(self):
        window = CTkToplevel(self)
        window.geometry("800x450")
        window.title("Data Storage")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=780, height=430, state="normal")
        textbox.insert("0.0", "Data Storage: \n" + "\n"
                            "After running the program and initiating the data gathering process, the program will start creating files that will be stored in \n" + 
                            "the same folder as the program itself. Once the data gathering process is complete, a file with all the data will be created. \n" +
                            " \n" + 
                            "The file will contain the following items: \n" + 
                            " \n" + 
                            "1) Video thumbnails as PNG files \n" + 
                            "2) Average brightness in an image as a text file \n" + 
                            "3) Dominant colors in an image as a text file \n" + 
                            "4) Fast dominant colors in an image as a text file \n" + 
                            "5) Information about the video as a text file \n" + 
                            "6) Most common used color in an image as a text file \n" + 
                            "7) YTlinks as a text file \n" + 
                            "8) Video information as a database file \n" + 
                            "9) Video information as an Excel file \n" + 
                            " \n" + 
                            "The file names will be numbered starting from 1, and each time the data gathering process is run, the program \n" + 
                            "will create a file with the next number in the sequence. \n" + 
                            " \n" + 
                            "In addition to the data gathering process, the program includes a section for managing databases.  \n" + 
                            "The tools available in this section include: \n" + 
                            " \n" + 
                            "1) Combine Databases \n" +
                            "2) Delete Duplicate Rows \n" +
                            "3) Convert Database to Excel \n" +
                            "4) Number of Rows in Database \n" +
                            " \n" +
                            "When combining databases, the program will create a file with an incremented number, similar to the data gathering process. \n" +
                            "Users can also convert the database file to an Excel file and check the number of rows in the database. \n" +
                            "It is recommended to use the “Delete Duplicate Rows“ function before converting the database to an \n" +
                            "Excel file, as this function only works on the database file. \n" +
                            " \n" +
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def Troubleshooting_window(self):
        window = CTkToplevel(self)
        window.geometry("800x450")
        window.title("Troubleshooting")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=780, height=430, state="normal")
        textbox.insert("0.0", "Here are some troubleshooting tips for the program: \n" + "\n"
                            "1) Make sure you are using a valid API key for the YouTube API, and it is the official API key from Google. \n" + 
                            " \n" +
                            "2) Even if the program is given a valid API key, it can stop working because the API has a limit of 10,000 requests per day. \n" + 
                            " \n" + 
                            "3) Ensure that the number of videos per channel is not more than 49 because that is the API limit. \n" + 
                            " \n" + 
                            "4) Make sure you are connected to the internet. \n" + 
                            " \n" +  
                            "5) Do not ask for too many searches, as the YouTube API you provided will run out of requests, causing the program to stop. \n" + 
                            " \n" + 
                            "6) Do not ask for too many searches or videos per channel, as the YouTube API you provided will run out of \n" + 
                            "requests, causing the program to stop. \n" +
                            " \n" + 
                            "7) If you spam press the start button, the program will crash. \n" + 
                            " \n" + 
                            "8) If a message box opens, it will tell you what the issue is with what you are doing, and you can use that to troubleshoot. \n" + 
                            " \n" + 
                            "9) Sometimes, if you are having an issue with the program, the error message will be in the main message box in the \n" + 
                            "center of the program.  \n" + 
                            " \n" + 
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def API_Documentation_window(self):
        window = CTkToplevel(self)
        window.geometry("800x450")
        window.title("API Documentation")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=780, height=430, state="normal")
        textbox.insert("0.0", "API Documentation: \n" + "\n"
                            "Getting the YouTube API key -  \n" + 
                            "Step 1: \n" + 
                            "Log in to Google Developers Console (https://console.cloud.google.com/) \n" + 
                            " \n" + 
                            "Step 2:  \n" + 
                            "Now, you have to create a new project on the developer console. To create a new project, click on the dropdown menu at the \n" +
                            "top of the page labeled “Select a project”. \n" + 
                            "Then click “New Project“, and enter the project name, select your organization (if applicable), and then click “Create“. \n" + 
                            " \n" + 
                            "Step 3: \n" + 
                            "Once your project is created, you'll need to enable the YouTube Data API in order to access its functionality. \n" + 
                            "To do this, go to your project and click on the “APIs & Services” menu on the left-hand side of the console. \n" +
                            "From here, click the “Enable APIs and Services” button. \n" +  
                            "Then look for “YouTube Data API V3”. You can either search it from the search box or simply scroll down. \n" + 
                            "Up next, click on the “YouTube Data API V3” API and click the “Enable” button. \n" + 
                            " \n" + 
                            "Step 4: \n" + 
                            "After enabling the API, you'll need to create credentials to authenticate your application when it makes requests to the API. \n" + 
                            "To create credentials, click on the “Create credentials” button on the API Dashboard page, and \n" + 
                            "select “YouTube Data API v3” from the dropdown menu.  \n" + 
                            "Then, choose “Public data” and click on “Next”. \n" + 
                            "Then it will take around 2-3 seconds and you'll get your API key. Once the API key is \n" + 
                            "generated, copy it and paste it into the YTV program. \n" +
                            "After copying the API key, click on “Done”. This will enable YTV to access the YouTube API and make requests.\n" + 
                            " \n" + 
                            "credit: https://docs.themeum.com/tutor-lms/tutorials/get-youtube-api-key/ \n" + 
                            " \n" + 
                            " \n" + 
                            "Here are a few things to keep in mind regarding the YouTube API in the program: \n" + 
                            " \n" + 
                            "1) The program asks for two API keys, but you can enter the same API key in both input fields. \n" + 
                            " \n" + 
                            "2) If you want to use two API keys, you can create two different email accounts and generate two separate API keys.  \n" + 
                            " \n" + 
                            "3) Even if the program is given a valid API key, it can stop working because the API has a limit of 10,000 requests per day. \n" + 
                            " \n" + 
                            " \n" + 
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def Support_window(self):
        window = CTkToplevel(self)
        window.geometry("800x500")
        window.title("Support")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        self.button1 = CTkButton(window, text="My YT Channel", command=self.OpenYouTube)
        self.button1.grid(row = 2, column=1,padx = 10,pady = 10, sticky="nsew")

        self.button2 = CTkButton(window, text="My second YT Channel", command=self.OpensecondYouTube)
        self.button2.grid(row = 2, column=2, padx = 10, pady = 10, sticky="nsew")

        textbox = CTkTextbox(window)
        textbox.grid(row = 0, column=1, padx = 10 , pady = 10,columnspan=2, sticky="nsew")

        textbox.configure(width=780, height=430, state="normal")
        textbox.insert("0.0", "Support: \n" + "\n"
                            "If you need support, you can join our Discord server at https://discord.com/invite/yprMq2jG5s .\n" + 
                            " \n" +
                            " \n" + 
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def Documentation_menu_window(self):
        window = CTkToplevel(self)
        window.geometry("200x600")
        window.title("Documentation")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)
        
        self.button1 = CTkButton(window, text="The Full Story", command= self.The_Full_Story_window)
        self.button1.place(relx=0.5, rely=0.05, anchor=tkinter.CENTER)

        self.button2 = CTkButton(window, text="About YTVisualizer", command= self.About_YTVisualizer_window)
        self.button2.place(relx=0.5, rely=0.13, anchor=tkinter.CENTER)

        self.button3 = CTkButton(window, text="How It Works", command= self.How_It_Works_window)
        self.button3.place(relx=0.5, rely=0.21, anchor=tkinter.CENTER)

        self.button4 = CTkButton(window, text="Simple User Manual", command= self.Simple_User_Manual_window)
        self.button4.place(relx=0.5, rely=0.29, anchor=tkinter.CENTER)

        self.button5 = CTkButton(window, text="Long User Manual", command= self.Long_User_Manual_window)
        self.button5.place(relx=0.5, rely=0.37, anchor=tkinter.CENTER)

        self.button6 = CTkButton(window, text="Link To Github", command= self.Open_link_to_github)
        self.button6.place(relx=0.5, rely=0.45, anchor=tkinter.CENTER)

        self.button7 = CTkButton(window, text="Data Storage", command= self.Data_Storage_window)
        self.button7.place(relx=0.5, rely=0.53, anchor=tkinter.CENTER)

        self.button8 = CTkButton(window, text="Troubleshooting", command= self.Troubleshooting_window)
        self.button8.place(relx=0.5, rely=0.61, anchor=tkinter.CENTER)

        self.button9 = CTkButton(window, text="API Documentation", command= self.API_Documentation_window)
        self.button9.place(relx=0.5, rely=0.69, anchor=tkinter.CENTER)

        self.button10 = CTkButton(window, text="Support", command= self.Support_window)
        self.button10.place(relx=0.5, rely=0.77, anchor=tkinter.CENTER)

        self.button11 = CTkButton(window, text="My YT Channel", command=self.OpenYouTube)
        self.button11.place(relx=0.5, rely=0.85, anchor=tkinter.CENTER)

        self.button12 = CTkButton(window, text="My second YT Channel", command=self.OpensecondYouTube)
        self.button12.place(relx=0.5, rely=0.93, anchor=tkinter.CENTER)

    def statistics_function_menu_window(self):
        window = CTkToplevel(self)
        window.geometry("660x250")
        window.title("Data Analysis")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        self.number_of_folder_to_open = 0

        self.button = CTkButton(window, text="Open Dialog", command=self.number_of_file_dialog)
        self.button.place(relx=0.15, rely=0.1, anchor=tkinter.CENTER)

        self.button2 = CTkButton(window, text="Views VS Brightness", command= lambda: create_views_brightness_graph(self.number_of_folder_to_open))
        self.button2.place(relx=0.15, rely=0.3, anchor=tkinter.CENTER)

        self.button3 = CTkButton(window, text="Most Common Colors", command=self.number_of_most_common_colors)
        self.button3.place(relx=0.4, rely=0.3, anchor=tkinter.CENTER)

        self.button4 = CTkButton(window, text="Best Length Of Title", command= lambda: title_views_graph_3D(self.number_of_folder_to_open))
        self.button4.place(relx=0.15, rely=0.5, anchor=tkinter.CENTER)

        self.button5 = CTkButton(window, text="Best Duration For Video", command= lambda: Duration_graph(self.number_of_folder_to_open))
        self.button5.place(relx=0.4, rely=0.5, anchor=tkinter.CENTER)

        self.button6 = CTkButton(window, text="Subscriber Count Graph", command= lambda: SubscriberCountViewsGraph(self.number_of_folder_to_open))
        self.button6.place(relx=0.15, rely=0.7, anchor=tkinter.CENTER)

        self.button7 = CTkButton(window, text="Likes Graph", command= lambda: LikesViewsGraph(self.number_of_folder_to_open))
        self.button7.place(relx=0.4, rely=0.7, anchor=tkinter.CENTER)

        self.button8 = CTkButton(window, text="Tags Graph", command= lambda: Tags_ViewsGraph(self.number_of_folder_to_open))
        self.button8.place(relx=0.15, rely=0.9, anchor=tkinter.CENTER)

        self.button9 = CTkButton(window, text="Best Date Menu", command=self.release_date_menu_window)
        self.button9.place(relx=0.4, rely=0.9, anchor=tkinter.CENTER)
        
        self.text_var.set(f"number of file to open {self.number_of_folder_to_open}")
        # create label on CTkToplevel window
        label = CTkLabel(window, textvariable=self.text_var)
        label.pack(side="top", fill="both", expand=True, padx=40, pady=40)
        label.place(relx=0.4, rely=0.1, anchor=tkinter.CENTER)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.75, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=280, state="normal")
        textbox.insert("0.0", "Data Analysis Window: \n" + "In this window, you can easily specify the \n" + 
                            "number of folder you wish to analyze by \n" + 
                            "clicking the Open Dialog button and inputting \n" +
                            "the desired number. Basic analysis can be \n" + 
                            "conducted using the built-in tools, but for more \n" + 
                            "in-depth analysis, you can utilize the Excel file \n" +
                            "found within the folder the program creates .\n")
        textbox.configure(state="disabled")

    def OpenYouTube(self):
        webbrowser.open('https://www.youtube.com/@TechnologyIL')

    def OpensecondYouTube(self):
        webbrowser.open('https://www.youtube.com/@MoreTechnologyIL')

    def TechnologyIL(self):
        window = CTkToplevel(self)
        window.geometry("800x500")
        window.title("About TechnologyIL")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        self.button1 = CTkButton(window, text="Technology IL Channel", command=self.OpenYouTube)
        self.button1.grid(row = 2, column=1,padx = 10,pady = 10, sticky="nsew")

        self.button2 = CTkButton(window, text="More Technology IL Channel", command=self.OpensecondYouTube)
        self.button2.grid(row = 2, column=2, padx = 10, pady = 10, sticky="nsew")

        textbox = CTkTextbox(window)
        textbox.grid(row = 0, column=1, padx = 10 , pady = 10,columnspan=2, sticky="nsew")

        textbox.configure(width=780, height=430, state="normal")
        textbox.insert("0.0", "The full story of “Technology IL“ \n" + "\n"
                            " \n" + 
                            "A very short summery about the channel: \n" +
                            "Technology IL is a channel about technology. We make videos focusing on product reviews and tutorials. \n" +
                            " \n" + 
                            " \n" + 
                            "How I started: \n" + 
                            "In school, we had programming classes, and many of my friends found them very difficult, including me. \n" +
                            "To solve this problem, my friend who was very good at programming and I started a channel about \n" + 
                            "Python programming. The channel's purpose was to help my friends learn the Python programming language \n" +
                            "better and to help me improve my programming skills. So we created the channel on May 5, 2020, and \n" +
                            "started uploading videos together. We uploaded the first video on May 7, 2020, and sent it to all our \n" +
                            "friends to watch and learn Python. We made a nine-part course teaching Python and many other videos. \n" + 
                            "By June 24, 2020, we uploaded the last video that would be uploaded to the channel. \n" + 
                            "Overall, we uploaded 20 videos and got around 1,500 views on the channel. \n" + 
                            " \n" +
                            "The actual start: \n" + 
                            "The channel my friend and I made was all about Python, but I wanted to make a channel where I would \n" +
                            "upload videos about many different programming languages. On July 6, 2020, I started that channel \n" +
                            "and called it Simply Programming. In this channel, I started making a wider range of tutorials. \n" +
                            "My first video was uploaded on July 6, 2020, and it talked about the channel and what videos I would \n" +
                            "be making. On the channel, I made videos about Python, Visual Basic, C, C++, and the Raspberry Pi. \n" +
                            "Most of the videos were part of courses on the subject, for example, I made a 42-part course about C++. \n" +
                            "All this time, I was uploading consistently, however, I was only getting a few single views on my videos. \n" +
                            "However, this was all about to change. On April 15, 2021, I uploaded my first video that was \n" +
                            "not a tutorial. It was a tech news video talking about the arrival of Tesla cars in Israel. \n" +
                            "This video, compared to my other videos, went viral and after a week got 163 views. \n" +
                            "After seeing the success of that video, I started a full series of tech news videos, informing people \n" +
                            "about the latest things in the tech world. I also started branching out to broader tech content and not \n" +
                            "only focusing on coding tutorials. This whole change of content strategy started gaining me more views \n" +
                            "a day than I had in a whole week before this change. On June 24, 2021, I uploaded a \n" +
                            "video talking about the new Windows 11. This video got 94 views on the first day and after a week \n" +
                            "it got over 450 views. So I doubled down on Windows content, making 8 videos about Windows 11 \n" +
                            "in the following weeks, gaining over 2,500 views in this short period of time. This boosted my \n" +
                            "channel views to the next level. \n" +
                            " \n" +
                            "The content grind: \n" +
                            "After that boost, I continued to upload content consistently and I got on average between 150 to 250 views a day. \n" +
                            "The content I made consisted of tutorials about different types of software and basic cybersecurity, and I made \n" +
                            "reviews about different products like the Nintendo Switch OLED and CPUs. And the next boost to my channel was \n" +
                            "on September 14, 2021, when the iPhone 13 was announced. I made videos on that day before any \n" +
                            "of the big YouTubers uploaded their videos, and because of that, I got all the initial wave of viewers. \n" +
                            "That night I got over 2,000 views, and my videos about all the new Apple products got over 10,000 \n" +
                            "views, which was a massive jump from the views I was getting. In the next following weeks, I continued \n" +
                            "uploading my usual content like editing tutorials, reviews, and more, and I was getting between 350 to 550 views \n" +
                            "in a single day. And then suddenly, over a matter of days, my views went down to around 150 to 250 views a day. \n" +
                            "This was a significant hit, and the first time my views went down, and I just couldn't understand why. \n" +
                            "This did affect me, yet I continued to upload and I stayed in the content grind. \n" +
                            "Over this long period, I took a short break and had a few successful videos, and my views started to \n" +
                            "go up again and gain more traction. This period lasted like a year and was a slow but steady period of \n" +
                            "growth for the channel. \n" +
                            " \n" +
                            "The new beginning: \n" +
                            "After a period lasting around a year, it was time for the release of the next iPhone and again, I made \n" +
                            "reviews of their new products and got a significant number of views. Then on October 16, 2022, \n" +
                            "I took a break for a month to make a new content strategy. My new strategy was to \n" +
                            "make one video every week and break up the video creation process into steps that I \n" +
                            "needed to complete every day to finish the video by the end of the week. Then after a month, I \n" +
                            "started uploading again and for 4 weeks, I uploaded a video every week. The last of these 4 videos \n" +
                            "was uploaded on December 23, 2022, a few days before the new year. \n" +
                            "And on December 26, 2022, in the shower, I had the idea to make the YouTube Visualizer software. \n" +
                            "I decided that day I would put all my time into the program because if I didn't, I would \n" +
                            "just delay making it and make YouTube videos instead. So I stopped making videos until I \n" +
                            "finished this program. And that took more time than I thought. \n" +
                            "And now you are reading this and that means I finished making my program!!!! \n" +
                            "So yeah, that's probably everything you need to know about the Technology IL channel. \n" +
                            " \n" +
                            " \n" + 
                            "By Technology IL \n" + 
                            " \n" + 
                            " \n" +
                            " \n")
        textbox.configure(state="disabled")

    def Open_File_Location(self):
        dir_path = os.path.dirname(os.path.abspath(sys.argv[0]))
        os.startfile(dir_path)
        app.PrintInTextBox(f"File Location: {dir_path}")

    def Manage_Databases_menu_window(self):
        window = CTkToplevel(self)
        window.geometry("660x250")
        window.title("Manage Databases")
        e = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAClah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pGgc/6RoHP+kaBz/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWsg/7qNVP/Rs43/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/1bmW/9W5lv/VuZb/0bON/7qNU/+layD/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6RpHf/Cmmf/+PPt////////////////////////////////////////////////////////////////////////////////////////////////////////////9/Ls/8GZZv+kaR3/pWof/6VqH/+lah//pWof/6VqH/+lah//qG4m/+XUv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5NO9/6duJf+lah//pWof/6VqH/+lah//pWof/6VpHv+qcy3/7eHS/////////////////////////v7/9vDp/+3h0v/q28n/59fE/+bVwP/l073/5dO9/+bVwP/n18T/6drI/+zg0P/17+b///7+///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP//////////////////////+fXw/+1g0b/q3Mt/6pwKf+pbyf/qG4l/6htJP+obST/qG4m/6luJ/+pcCn/q3Is/7SBQ//l1L///////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////+/v3/xZ5u/6RmGv+maR//pmof/6ZqIP+maR//pmkf/6ZqIP+maiD/pmog/6ZqH/+mah//pGYb/8Obav/+/fz/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////v49f+7jFP/pWgd/6ZqIP+maiD/pmog/6x1MP+qcCn/pWgd/6ZqIP+maiD/pmog/6ZqIP+laB3/uYpR//r39P/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+fbx/7eHTP+laB3/pmog/6ZqIP+laB3/yqZ5/+TSu/+/k13/qW4n/6ZqH/+maiD/pmog/6VoHf+2hUj/+PTv/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////59fD/t4ZK/6VoHf+maiD/pmog/6VoHP/Nq4L///////v59v/bwqT/rXUx/6ZpH/+maiD/pWge/7WDRv/48+3/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////n18P+3h0v/pWgd/6ZqIP+maiD/pWgc/82sgv/7+fX/4c20/72RWv+obSX/pmog/6ZqIP+laB7/toRH//j07v/////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP/////////////////+/j0/7qLUf+laB3/pmog/6ZqIP+laR7/u45W/7+VYP+obib/pWgd/6ZqIP+maiD/pmog/6VoHf+4iU7/+vfy/////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0//////////////////9/Pv/wphl/6RnHP+maiD/pmog/6ZqIP+maR//pWgd/6ZqIP+maiD/pmog/6ZqIP+maiD/pGcc/8CWYv/9/Pr/////////////////7ODQ/6pyK/+laR7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT///////////////////////fya7/rHQv/6ZrIf+mah//pWke/6VpHv+laB7/pWge/6VpHv+laR7/pmof/6ZrIf+rcy3/3caq///////////////////////s4ND/qnIr/6VpHv+lah//pWof/6VqH/+lah//pWke/6tzLf/t4dP///////////////////////38+v/r3s7/4Muw/9zEp//ZwKD/17yb/9a7mf/Wu5n/17yb/9m/oP/cxKf/4Mqw/+vezf/9+/r//////////////////////+zg0P+qciv/pWke/6VqH/+lah//pWof/6VqH/+laR7/q3Mt/+3h0///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6dvJ/6lwKP+lah7/pWof/6VqH/+lah//pWof/6VpHv+rcy3/7eHT//////////////////////////////////////////////////////////////////////////////////////////////////////////////////7+/v/Rs4z/pWke/6VqH/+lah//pWof/6VqH/+lah//pWke/6pzLf/t4dL////////////////////////////////////////////////////////////38er/7+TW/+/k1v/v5Nb/7+TW/+/k1v/v5Nb/7+TW/+/k1v/s38//0rWP/6tzLf+laR7/pWof/6VqH/+lah//pWof/6VqH/+lah7/qG8n/+fXw///////////////////////////////////////////////////////9/Ls/7+VYP+qdC3/q3Uv/6t1L/+rdS//q3Uv/6t1L/+rdS//q3Uv/6pyK/+lah//pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaR3/x6Jz//v49P////////////////////////////////////////////z6+P/OroX/pWof/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+nbCP/wZhk/9m/n//bw6X/28Ol/9vDpf/bw6X/28Ol/9vDpf/ZwaH/xJ1s/6duJf+lah7/pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+kaBz/pWkd/6VpHv+laR7/pWke/6VpHv+laR7/pWke/6VpHv+kaBz/pWoe/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//pWof/6VqH/+lah//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
        img_data = base64.b64decode(e)
        img = Image.open(io.BytesIO(img_data))
        photo = ImageTk.PhotoImage(img)
        window.wm_iconphoto(False, photo)

        self.number_of_folder_to_open = 0
        self.number_of_folder_to_open2 = 0

        self.button = CTkButton(window, text="Open Dialog 1", command=self.number_of_file_dialog)
        self.button.place(relx=0.15, rely=0.2, anchor=tkinter.CENTER)

        self.button = CTkButton(window, text="Open Dialog 2", command=self.number_of_file_dialog2)
        self.button.place(relx=0.15, rely=0.4, anchor=tkinter.CENTER)

        self.button2 = CTkButton(window, text="Combine Databases", command= lambda: combine_databases(self.number_of_folder_to_open, self.number_of_folder_to_open2))
        self.button2.place(relx=0.15, rely=0.6, anchor=tkinter.CENTER)

        self.button3 = CTkButton(window, text="Delete Duplicate Rows", command= lambda: delete_duplicate_rows(self.number_of_folder_to_open))
        self.button3.place(relx=0.4, rely=0.6, anchor=tkinter.CENTER)

        self.button4 = CTkButton(window, text="Database To Excel", command= lambda: ManageDatabase_sqlite_to_excel(self.number_of_folder_to_open))
        self.button4.place(relx=0.15, rely=0.8, anchor=tkinter.CENTER)

        self.button5 = CTkButton(window, text="Number Of Rows", command= lambda: count_rows(self.number_of_folder_to_open))
        self.button5.place(relx=0.4, rely=0.8, anchor=tkinter.CENTER)

        self.text_var.set(f"number of file to open {self.number_of_folder_to_open}")
        # create label on CTkToplevel window
        label = CTkLabel(window, textvariable=self.text_var)
        label.pack(side="top", fill="both", expand=True, padx=40, pady=40)
        label.place(relx=0.4, rely=0.2, anchor=tkinter.CENTER)

        self.text_var2.set(f"number of file to open {self.number_of_folder_to_open2}")
        # create label on CTkToplevel window
        labe2 = CTkLabel(window, textvariable=self.text_var2)
        labe2.pack(side="top", fill="both", expand=True, padx=40, pady=40)
        labe2.place(relx=0.4, rely=0.4, anchor=tkinter.CENTER)

        textbox = CTkTextbox(window)
        textbox.place(relx=0.75, rely=0.5, anchor=tkinter.CENTER)

        textbox.configure(width=280, state="normal")
        textbox.insert("0.0", "Manage Databases Window: \n" + "In this window, you can easily manage the \n" + 
                            "databases created by the program. You have \n" + 
                            "the option to combine multiple databases,\n" +
                            "remove duplicate rows, export the database \n" + 
                            "to Excel, and quickly view the total number of \n" + 
                            "rows in the database. By default, the \n" +
                            "database selected for management is from \n" + 
                            "the - Open Dialog 1, however, for \n" +
                            "the - Combine Databases function, you can \n" + 
                            "select additional databases\n" + 
                            "using - Open Dialog 2 and seamlessly merge \n" +
                            "them into one comprehensive database. \n" +
                            "found within the folder the program creates .\n")
        textbox.configure(state="disabled")

    def PrintInTextBox(self , text):
        self.textbox2.configure(state="normal")
        self.textbox2.insert("0.0", f"{text} \n")
        self.textbox.configure(state="disabled")

    def makewindow(self):

        # create sidebar frame with widgets
        self.sidebar_frame = CTkFrame(self, width=140, corner_radius=0)
        self.sidebar_frame.grid(row=0, column=0, rowspan=6, sticky="nsew")
        self.sidebar_frame.grid_rowconfigure(6, weight=1)

    
        self.logo_label = CTkLabel(self.sidebar_frame, text="Program Menu:", font= CTkFont(size=20, weight="bold"))
        self.logo_label.grid(row=0, column=0, padx=20, pady=(20, 10))

        self.sidebar_button_1 = CTkButton(self.sidebar_frame, command= self.statistics_function_menu_window, text="Data Analysis")
        self.sidebar_button_1.grid(row=1, column=0, padx=20, pady=10)

        self.sidebar_button_2 = CTkButton(self.sidebar_frame, command=self.Manage_Databases_menu_window, text="Manage Databases")
        self.sidebar_button_2.grid(row=2, column=0, padx=20, pady=10)

        self.sidebar_button_3 = CTkButton(self.sidebar_frame, command=self.Open_File_Location, text="Open File Location")
        self.sidebar_button_3.grid(row=3, column=0, padx=20, pady=10)

        self.sidebar_button_4 = CTkButton(self.sidebar_frame, command=self.TechnologyIL, text="About TechnologyIL")
        self.sidebar_button_4.grid(row=4, column=0, padx=20, pady=10)

        self.sidebar_button_5 = CTkButton(self.sidebar_frame, command=self.Documentation_menu_window, text="Documentation")
        self.sidebar_button_5.grid(row=5, column=0, padx=20, pady=10)

        self.appearance_mode_label = CTkLabel(self.sidebar_frame, text="Appearance Mode:", anchor="w")
        self.appearance_mode_label.grid(row=7, column=0, padx=20, pady=(10, 0))
        self.appearance_mode_optionemenu = CTkOptionMenu(self.sidebar_frame, values=["Light", "Dark", "System"], 
                                                                       command=self.change_appearance_mode_event)
        self.appearance_mode_optionemenu.grid(row=8, column=0, padx=20, pady=(10, 10))

        self.scaling_label = CTkLabel(self.sidebar_frame, text="UI Scaling:", anchor="w")
        self.scaling_label.grid(row=9, column=0, padx=20, pady=(10, 0))
        self.scaling_optionemenu = CTkOptionMenu(self.sidebar_frame, values=["90%", "100%", "105%"],
                                                               command=self.change_scaling_event)
        self.scaling_optionemenu.grid(row=10, column=0, padx=20, pady=(10, 20))

        # create textbox
        self.textbox = CTkTextbox(self, state="disabled")
        self.textbox.grid(row=0, column=2, padx=(20, 10), pady=(20, 10), sticky="nsew")

        # create tabview
        self.tabview = CTkTabview(self, width=450)
        self.tabview.grid(row=0, column=1, padx=(20, 0), pady=(20, 10), sticky="nsew")
        self.tabview.add("API seting")
        self.tabview.add("Number of ...")
        self.tabview.add("Search")
        self.tabview.add("Start")

        self.tabview.tab("API seting").grid_columnconfigure(0, weight=1)  # configure grid of individual tabs
        self.tabview.tab("Number of ...").grid_columnconfigure(0, weight=1)
        self.tabview.tab("Search").grid_columnconfigure(0, weight=1)
        self.tabview.tab("Start").grid_columnconfigure(0, weight=1)

        #API seting
        self.tabview.tab("API seting").grid_columnconfigure(1, weight=1)
        self.tabview.tab("API seting").grid_rowconfigure(0, weight=0)
        CTkLabelForApiOne = CTkLabel(self.tabview.tab("API seting"), text="First Api:")
        CTkLabelForApiOne.grid(row = 0, column=0, pady = 2, sticky="nsew")
        
        self.EntryForApiOne = CTkEntry(self.tabview.tab("API seting"), textvariable=self.ApiOne)
        self.EntryForApiOne.grid(row = 0, column=1, pady = 2, sticky="nsew")

        CTkLabelForApiTwo = CTkLabel(self.tabview.tab("API seting"), text="Second Api:")
        CTkLabelForApiTwo.grid(row = 1, column=0, pady =2 , sticky="nsew")
        
        self.EntryForApiTwo = CTkEntry(self.tabview.tab("API seting"), textvariable=self.ApiTwo)
        self.EntryForApiTwo.grid(row = 1, column=1, pady = 2, sticky="nsew")

        CTkLabelForShowApiOne = CTkLabel(self.tabview.tab("API seting"), textvariable=self.ApiShowOne)
        CTkLabelForShowApiOne.grid(row = 2, columnspan = 2, pady = 5, sticky="nsew")

        CTkLabelForShowApiTwo = CTkLabel(self.tabview.tab("API seting"), textvariable=self.ApiShowTwo)
        CTkLabelForShowApiTwo.grid(row = 3, columnspan= 2, pady = 5, sticky="nsew")

        self.string_input_button = CTkButton(self.tabview.tab("API seting"), text="Seting your Api", 
                                             command=self.SetApi).grid(row = 4, column=0, padx = 5, pady = 5, sticky="nsew")
        CTkButton(self.tabview.tab("API seting"), text="Next", command=self.Next).grid(row = 4, column=1, pady = 5, sticky="nsew")

        #Number of ...

        CTkLabel(self.tabview.tab("Number of ..."), text="Number of videos per channel:").grid(row = 0, column=0,pady = 5, sticky="nsew")

        self.EntryForNum = CTkEntry(self.tabview.tab("Number of ..."), textvariable=self.Num)
        self.EntryForNum.grid(row = 0, column=1,pady = 5, sticky="nsew")

        CTkLabel(self.tabview.tab("Number of ..."), text="Number of YouTube searches:").grid(row = 1, column=0,pady = 5, sticky="nsew")

        self.EntryForNum = CTkEntry(self.tabview.tab("Number of ..."), textvariable=self.Num2)
        self.EntryForNum.grid(row = 1, column=1,pady = 5, sticky="nsew")
        
        CTkButton(self.tabview.tab("Number of ..."), text="submit", command=self.SetNum).grid(row = 2, column=1,pady = 5, sticky="nsew")

        
        CTkLabel(self.tabview.tab("Number of ..."), textvariable=self.MsgSubmit).grid(row = 3, column=0,pady = 5, sticky="nsew")

        CTkButton(self.tabview.tab("Number of ..."), text="Back", command=self.Back).grid(row = 4, column=0,pady = 5,padx=50, sticky="nsew")
        CTkButton(self.tabview.tab("Number of ..."), text="Next", command=self.Next).grid(row = 4, column=1,pady = 5, sticky="nsew")

        #search
        CTkLabel(self.tabview.tab("Search"), textvariable=self.MsgAmount).grid(row = 0, column=0, columnspan=2, sticky="nsew")

        CTkEntry(self.tabview.tab("Search"), textvariable=self.Search).grid(row = 1, column=0, padx=(0,5), sticky="nsew")
        
        CTkButton(self.tabview.tab("Search"), text="submit", command=self.StartProssing).grid(row = 1, column=1, sticky="nsew")

        self.textbox3 = CTkTextbox(self.tabview.tab("Search"), height=100, state="disabled")

        self.textbox3.grid(row = 2, column=0, columnspan=2, pady=10, padx=5, sticky="nsew")
        
        CTkButton(self.tabview.tab("Search"), text="Back", command=self.Back).grid(row = 3, column=0, padx=(0,5), sticky="nsew")
        CTkButton(self.tabview.tab("Search"), text="Next", command=self.Next).grid(row = 3, column=1, sticky="nsew")

        #start
        CTkButton(self.tabview.tab("Start"), text="Start", command=self.Get_All_Input_And_START, height=150, width=300, font=("lucida",40), hover_color= "green").pack()
        CTkButton(self.tabview.tab("Start"), text="Reset", command=self.Reset, height=50, width=300, font=("lucida",30), hover_color= "red").pack()

        # create textbox   
        self.textbox2 = CTkTextbox(self, width=1000, state="disabled")
        self.textbox2.grid(row=1, column=1, columnspan=2, padx=10, pady=(10, 0), sticky="nsew")

        self.progressbar_1 = CTkProgressBar(self, height=15)
        self.progressbar_1.grid(row=2, column=1, columnspan=2, padx=10, sticky="ew")
        
        # set default values
        self.scaling_optionemenu.set("100%")

        self.progressbar_1.configure(mode="indeterminnate", progress_color=["#3B8ED0", "#1F6AA5"])
        self.progressbar_1.start()

        self.textbox.configure(state="normal")
        self.textbox.insert("0.0", "YouTubeVisualizer: \n" + 
                            "The YTV program utilizes an API input provided by the user to \n" +
                            "search and retrieve videos from YouTube channels. \n" + 
                            "It then proceeds to download the video thumbnails and\n" +
                            "performs a thorough analysis on them. \n" + 
                            "Additionally, the program gathers information from all the videos \n" + 
                            "and uses it to calculate statistics which are then saved in a \n" + "database for future reference. \n"+
                            " \n" +
                            "To familiarize yourself with the program's usage, you can \n" +
                            "access thecomprehensive documentation located in the program \n" +
                            "menu on the left-hand side of the window. By referring to the \n" +
                            "documentation, you will find detailed instructions and guidance  \n" +
                            "on how to effectively utilize the program's features and \n" +
                            "functionalities. It serves as a valuable resource for \n" +
                            "acquiring a thorough understanding of how to navigate \n" +
                            "and maximize the program's capabilities. \n" +
                            " \n" +
                            " \n" +
                            " \n")
        self.textbox.configure(state="disabled")
     
def Start():
    global app
    app = window()
    def on_closing():
        if messagebox.askokcancel("Quit", "Do you want to quit?"):
            app.destroy()
            plt.close('all')
    app.protocol("WM_DELETE_WINDOW", on_closing)
    app.mainloop()
    os.kill(os.getpid(), 9)


